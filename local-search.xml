<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>CE、AOB注入以及一些碎碎念</title>
    <link href="/2024/12/30/CE%E3%80%81AOB%E6%B3%A8%E5%85%A5%E4%BB%A5%E5%8F%8A%E4%B8%80%E4%BA%9B%E7%A2%8E%E7%A2%8E%E5%BF%B5/"/>
    <url>/2024/12/30/CE%E3%80%81AOB%E6%B3%A8%E5%85%A5%E4%BB%A5%E5%8F%8A%E4%B8%80%E4%BA%9B%E7%A2%8E%E7%A2%8E%E5%BF%B5/</url>
    
    <content type="html"><![CDATA[<h2 id="前言">前言</h2><p>最近又看了CE相关的教学视频<ahref="https://www.bilibili.com/video/BV1Eg4y1X7ey/">【从零学游戏逆向】CE入门教程</a>，与以往其他的教程不太一样，这个教程有教一些简单的汇编代码，以及一些基础的原理。我有十足的把握，我明白了寻找基址的方法和原理。</p><p>于是，我便自己找了个游戏去练手。很快，我就被现实打了脸。我研究了很久，意识到自己确实是学会了，只是用来练手的那个游戏比较特殊。具体情况，这里不做赘述了。</p><p>但是没关系，这个教程还教了AOB注入，能够“曲线救国”。不过，如果想制作一个外挂共其他人使用，CE生成的修改器颜值实在不太行。如果能自己通过写代码实现AOB注入就好了。<ahref="https://www.bilibili.com/video/BV1tZ4y1H7EA/">CE嗨</a>的教程视频里，对AOB注入的原理进行了更详细的讲解，再配合ChatGPT，我能够通过写代码实现简易的AOB注入了。</p><h2 id="aob注入">AOB注入</h2><h3 id="基本原理">基本原理</h3><ol type="1"><li>搜索注入点的字节码（Array ofBytes，AOB），这个字节码需要是唯一的，获得内存地址</li><li>在指定地址写入自定义代码</li></ol><h3 id="用-c-实现-aob-注入功能">用 C# 实现 AOB 注入功能</h3><h4 id="案例1">案例1</h4><p>原代码：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs assembly">ac_client.exe+C73EF: FF 08           - dec [eax]<br>ac_client.exe+C73F1: 8D 44 24 1C     - lea eax,[esp+1C]<br></code></pre></td></tr></table></figure><p>其中<code>dec [eax]</code>就是子弹数减一。</p><p>想实现无限子弹的话，最简单的方法就是将这一行代码用空指令<code>nop</code>填充。所以方法就是搜索<code>FF 08 8D 44 24 1C</code>，获得内存地址（只搜<code>FF 08</code>大概率会有重复的），然后在该地址写入<code>90 90</code>，即两个<code>nop</code>。</p><p>C#实现：</p><ol type="1"><li><p>导入 Windows API</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs c#">[<span class="hljs-meta">DllImport(<span class="hljs-string">&quot;kernel32.dll&quot;</span>)</span>]<br><span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">extern</span> IntPtr <span class="hljs-title">OpenProcess</span>(<span class="hljs-params"><span class="hljs-built_in">int</span> dwDesiredAccess, <span class="hljs-built_in">bool</span> bInheritHandle, <span class="hljs-built_in">int</span> dwProcessId</span>)</span>;<br><br>[<span class="hljs-meta">DllImport(<span class="hljs-string">&quot;kernel32.dll&quot;</span>)</span>]<br><span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">extern</span> <span class="hljs-built_in">bool</span> <span class="hljs-title">ReadProcessMemory</span>(<span class="hljs-params">IntPtr hProcess, IntPtr lpBaseAddress, <span class="hljs-built_in">byte</span>[] lpBuffer, <span class="hljs-built_in">uint</span> nSize, <span class="hljs-keyword">out</span> IntPtr lpNumberOfBytesRead</span>)</span>;<br><br>[<span class="hljs-meta">DllImport(<span class="hljs-string">&quot;kernel32.dll&quot;</span>)</span>]<br><span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">extern</span> <span class="hljs-built_in">bool</span> <span class="hljs-title">WriteProcessMemory</span>(<span class="hljs-params">IntPtr hProcess, IntPtr lpBaseAddress, <span class="hljs-built_in">byte</span>[] lpBuffer, <span class="hljs-built_in">uint</span> nSize, <span class="hljs-keyword">out</span> IntPtr lpNumberOfBytesWritten</span>)</span>;<br></code></pre></td></tr></table></figure></li><li><p>获取进程</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs c#"><span class="hljs-keyword">const</span> <span class="hljs-built_in">int</span> PROCESS_ALL_ACCESS = <span class="hljs-number">0x1F0FFF</span>;<br><br><span class="hljs-built_in">string</span> processName = <span class="hljs-string">&quot;ac_client&quot;</span>;<br>Process process = Process.GetProcessesByName(processName)[<span class="hljs-number">0</span>];<br>IntPtr hProcess = OpenProcess(PROCESS_ALL_ACCESS, <span class="hljs-literal">false</span>, process.Id);<br></code></pre></td></tr></table></figure></li><li><p>搜索字节码</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs c#"><span class="hljs-function">IntPtr <span class="hljs-title">FindPattern</span>(<span class="hljs-params">IntPtr hProcess, Process process, <span class="hljs-built_in">byte</span>[] pattern</span>)</span><br>&#123;<br>    <span class="hljs-keyword">foreach</span> (ProcessModule module <span class="hljs-keyword">in</span> process.Modules)<br>    &#123;<br>        IntPtr baseAddress = module.BaseAddress;<br>        <span class="hljs-built_in">int</span> moduleSize = module.ModuleMemorySize;<br>        <span class="hljs-built_in">byte</span>[] buffer = <span class="hljs-keyword">new</span> <span class="hljs-built_in">byte</span>[moduleSize];<br><br>        ReadProcessMemory(hProcess, baseAddress, buffer, (<span class="hljs-built_in">uint</span>)moduleSize, <span class="hljs-keyword">out</span> _);<br>        <span class="hljs-keyword">for</span> (<span class="hljs-built_in">int</span> i = <span class="hljs-number">0</span>; i &lt; buffer.Length - pattern.Length; i++)<br>        &#123;<br>            <span class="hljs-built_in">bool</span> found = <span class="hljs-literal">true</span>;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-built_in">int</span> j = <span class="hljs-number">0</span>; j &lt; pattern.Length; j++)<br>            &#123;<br>                <span class="hljs-keyword">if</span> (buffer[i + j] != pattern[j])<br>                &#123;<br>                    found = <span class="hljs-literal">false</span>;<br>                    <span class="hljs-keyword">break</span>;<br>                &#125;<br>            &#125;<br><br>            <span class="hljs-keyword">if</span> (found)<br>            &#123;<br>                <span class="hljs-keyword">return</span> baseAddress + i;<br>            &#125;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">return</span> IntPtr.Zero;<br>&#125;<br><br><span class="hljs-built_in">byte</span>[] pattern = [<span class="hljs-number">0xFF</span>, <span class="hljs-number">0x08</span>, <span class="hljs-number">0x8D</span>, <span class="hljs-number">0x44</span>, <span class="hljs-number">0x24</span>, <span class="hljs-number">0x1C</span>];<br>IntPtr targetAddress = FindPattern(hProcess, process, pattern);<br></code></pre></td></tr></table></figure></li><li><p>注入</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs c#"><span class="hljs-built_in">byte</span>[] injectCode = [<span class="hljs-number">0x90</span>, <span class="hljs-number">0x90</span>];<br>WriteProcessMemory(hProcess, targetAddress, injectCode, (<span class="hljs-built_in">uint</span>)injectCode.Length, <span class="hljs-keyword">out</span> _);<br></code></pre></td></tr></table></figure></li><li><p>取消注入</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c#">WriteProcessMemory(hProcess, targetAddress, pattern, (<span class="hljs-built_in">uint</span>)pattern.Length, <span class="hljs-keyword">out</span> _);<br></code></pre></td></tr></table></figure></li></ol><h4 id="案例二">案例二</h4><p>这个就是我拿来练手的游戏。原代码：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs assembly">PlagueExternal.SetEvoPoints+6:  8B 45 0C           - mov eax,[ebp+0C]<br>PlagueExternal.SetEvoPoints+9:  8B C8              - mov ecx,eax<br>PlagueExternal.SetEvoPoints+B:  2B 4A 04           - sub ecx,[edx+04]<br>PlagueExternal.SetEvoPoints+E:  01 8A C4 01 00 00  - add [edx+000001C4],ecx<br>PlagueExternal.SetEvoPoints+14: 89 42 04           - mov [edx+04],eax<br></code></pre></td></tr></table></figure><p><code>[ebp+0C]</code>是将要改变成的DNA数量，然后赋值给了<code>eax</code>、<code>ecx</code>。<code>[edx+04]</code>和<code>[edx+000001C4]</code>，都是当前的DNA数量（两者的异同没研究明白）。<code>ecx</code>与<code>[edx+04]</code>相减，得到变化值，然后加到<code>[edx+000001C4]</code>上；将<code>eax</code>赋值给<code>[edx+04]</code>。这样就完成了DNA数量的变化。</p><p>找不到DNA数量的基址，那就“曲线救国”，让进化的时候不消耗DNA。在<code>mov ecx,eax</code>处进行注入，比较<code>eax</code>和<code>[edx+04]</code>的大小，如果<code>eax</code>更大，就走正常流程，否则就将<code>eax</code>赋值为<code>[edx+04]</code>，然后走正常流程。这样就能实现DNA数量的只增不减。</p><p>显然，只在原处修改代码是无法实现的，需要新申请一块内存空间，在其中写入相关代码，在注入处跳转至新内存空间，再跳转回来。</p><figure><imgsrc="https://zuoguan-piclib-1257172707.cos.ap-guangzhou.myqcloud.com/CE%E3%80%81AOB%E6%B3%A8%E5%85%A5%E4%BB%A5%E5%8F%8A%E4%B8%80%E4%BA%9B%E7%A2%8E%E7%A2%8E%E5%BF%B5/image-20241230145247717.png"alt="注入代码，跳转至新内存空间" /><figcaption aria-hidden="true">注入代码，跳转至新内存空间</figcaption></figure><figure><imgsrc="https://zuoguan-piclib-1257172707.cos.ap-guangzhou.myqcloud.com/CE%E3%80%81AOB%E6%B3%A8%E5%85%A5%E4%BB%A5%E5%8F%8A%E4%B8%80%E4%BA%9B%E7%A2%8E%E7%A2%8E%E5%BF%B5/image-20241230150016568.png"alt="新内存空间内的代码" /><figcaption aria-hidden="true">新内存空间内的代码</figcaption></figure><p>C#实现：</p><ol type="1"><li><p>导入 Windows API</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs c#">[<span class="hljs-meta">DllImport(<span class="hljs-string">&quot;kernel32.dll&quot;</span>)</span>]<br><span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">extern</span> IntPtr <span class="hljs-title">OpenProcess</span>(<span class="hljs-params"><span class="hljs-built_in">int</span> dwDesiredAccess, <span class="hljs-built_in">bool</span> bInheritHandle, <span class="hljs-built_in">int</span> dwProcessId</span>)</span>;<br><br>[<span class="hljs-meta">DllImport(<span class="hljs-string">&quot;kernel32.dll&quot;</span>)</span>]<br><span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">extern</span> <span class="hljs-built_in">bool</span> <span class="hljs-title">ReadProcessMemory</span>(<span class="hljs-params">IntPtr hProcess, IntPtr lpBaseAddress, <span class="hljs-built_in">byte</span>[] lpBuffer, <span class="hljs-built_in">uint</span> nSize, <span class="hljs-keyword">out</span> IntPtr lpNumberOfBytesRead</span>)</span>;<br><br>[<span class="hljs-meta">DllImport(<span class="hljs-string">&quot;kernel32.dll&quot;</span>)</span>]<br><span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">extern</span> <span class="hljs-built_in">bool</span> <span class="hljs-title">WriteProcessMemory</span>(<span class="hljs-params">IntPtr hProcess, IntPtr lpBaseAddress, <span class="hljs-built_in">byte</span>[] lpBuffer, <span class="hljs-built_in">uint</span> nSize, <span class="hljs-keyword">out</span> IntPtr lpNumberOfBytesWritten</span>)</span>;<br><br><span class="hljs-comment">// 申请内存</span><br>[<span class="hljs-meta">DllImport(<span class="hljs-string">&quot;kernel32.dll&quot;</span>)</span>]<br><span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">extern</span> IntPtr <span class="hljs-title">VirtualAllocEx</span>(<span class="hljs-params">IntPtr hProcess, IntPtr lpAddress, <span class="hljs-built_in">uint</span> dwSize, <span class="hljs-built_in">uint</span> flAllocationType, <span class="hljs-built_in">uint</span> flProtect</span>)</span>;<br><br><span class="hljs-comment">// 释放内存</span><br>[<span class="hljs-meta">DllImport(<span class="hljs-string">&quot;kernel32.dll&quot;</span>, SetLastError = true)</span>]<br><span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">extern</span> <span class="hljs-built_in">bool</span> <span class="hljs-title">VirtualFreeEx</span>(<span class="hljs-params">IntPtr hProcess, IntPtr lpAddress, <span class="hljs-built_in">uint</span> dwSize, <span class="hljs-built_in">uint</span> dwFreeType</span>)</span>;<br></code></pre></td></tr></table></figure></li><li><p>获取进程</p></li><li><p>搜索字节码</p></li><li><p>注入</p><ul><li><p>申请内存</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs c#"><span class="hljs-keyword">const</span> <span class="hljs-built_in">uint</span> PAGE_EXECUTE_READWRITE = <span class="hljs-number">0x40</span>;<br>IntPtr memAddress = VirtualAllocEx(hProcess, IntPtr.Zero, <span class="hljs-number">0x1000</span>, <span class="hljs-number">4096</span>, PAGE_EXECUTE_READWRITE);<br></code></pre></td></tr></table></figure></li><li><p>跳转至新内存空间</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs c#"><span class="hljs-built_in">byte</span>[] jumpToNewMemCode = [<br>    <span class="hljs-number">0xE9</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>, <span class="hljs-comment">// jmp xxx</span><br>];<br><span class="hljs-comment">// jmp 相对地址</span><br>IntPtr relativeAddress = memAddress - (targetAddress + <span class="hljs-number">5</span>);<br>BitConverter.GetBytes((<span class="hljs-built_in">int</span>)relativeAddress).CopyTo(jumpToNewMemCode, <span class="hljs-number">1</span>);<br>WriteProcessMemory(hProcess, targetAddress, jumpToNewMemCode, (<span class="hljs-built_in">uint</span>)jumpToNewMemCode.Length, <span class="hljs-keyword">out</span> _);<br></code></pre></td></tr></table></figure></li><li><p>新内存空间代码</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs c#"><span class="hljs-built_in">byte</span>[] injectCode = [<br>    <span class="hljs-number">0x3B</span>, <span class="hljs-number">0x42</span>, <span class="hljs-number">0x04</span>, <span class="hljs-comment">// cmp eax,[edx+04]</span><br>    <span class="hljs-number">0x0F</span>, <span class="hljs-number">0x8F</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>, <span class="hljs-comment">// jg xxx</span><br>    <span class="hljs-number">0x8B</span>, <span class="hljs-number">0x42</span>, <span class="hljs-number">0x04</span>, <span class="hljs-comment">// mov eax,[edx+04]</span><br>    <span class="hljs-number">0x8B</span>, <span class="hljs-number">0xC8</span>, <span class="hljs-comment">// mov ecx,eax</span><br>    <span class="hljs-number">0x2B</span>, <span class="hljs-number">0x4A</span>, <span class="hljs-number">0x04</span>, <span class="hljs-comment">// sub ecx,[edx+04]</span><br>    <span class="hljs-number">0xE9</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>, <span class="hljs-comment">// jmp xxx</span><br>];<br><span class="hljs-comment">// jg 相对地址</span><br><span class="hljs-comment">// relativeAddress = (memAddress + 12) - (memAddress + 9);</span><br><span class="hljs-comment">// relativeAddress = 3</span><br>BitConverter.GetBytes(<span class="hljs-number">3</span>).CopyTo(injectCode, <span class="hljs-number">5</span>);<br><br><span class="hljs-comment">// jmp 相对地址</span><br>relativeAddress = (targetAddress + jumpToNewMemCode.Length) - (memAddress + injectCode.Length);<br>BitConverter.GetBytes((<span class="hljs-built_in">int</span>)relativeAddress).CopyTo(injectCode, injectCode.Length - <span class="hljs-number">4</span>); <span class="hljs-comment">// 填充 jmp 地址</span><br><br>WriteProcessMemory(hProcess, memAddress, injectCode, (<span class="hljs-built_in">uint</span>)injectCode.Length, <span class="hljs-keyword">out</span> _);<br></code></pre></td></tr></table></figure></li></ul><p>跳转相对地址的计算方法：目标地址 -跳转指令（含相对地址）末尾的地址</p></li><li><p>取消注入</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs c#">WriteProcessMemory(hProcess, targetAddress, pattern, (<span class="hljs-built_in">uint</span>)pattern.Length, <span class="hljs-keyword">out</span> _);<br><br><span class="hljs-keyword">const</span> <span class="hljs-built_in">uint</span> MEM_RELEASE = <span class="hljs-number">0x8000</span>;<br>VirtualFreeEx(hProcess, memAddress, <span class="hljs-number">0</span>, MEM_RELEASE)<br></code></pre></td></tr></table></figure></li></ol><h3 id="将汇编转换为16进制机器码">将汇编转换为16进制机器码</h3><p>以上的16进制机器码，都是我从CE中抄来的。粗略地搜索了一下，C#中似乎并没有一个完善的库来实现这个功能，容我细细研究一下。</p><h2 id="一些碎碎念">一些碎碎念</h2><p>从我萌生了做游戏外挂的想法到今天，至少8年了。然而非常可惜，直到今天，我也才能、只能在这种不设防的、简单的单机游戏，完成一些简单的作弊。不过作为一个非专业人员，只是一个爱好者，可能也足够了？</p><p>回想一下，在“作弊”这一领域，我确实点了不少技能。</p><p>我个人觉得，我最强的领域大概就是爬虫了。不过这也只是对于我个人而言，在高手眼里，我可能很菜很菜。爬虫技术是真正帮我解决过大问题的。本科毕业有创分要求，对与一个不爱参加社团的社恐死宅来说，最好的获取创分的方法就是参加各种讲座。而讲座一般都分为预报名和现场报名。现场报名正式开始前的1~2小时就会有人开始排队，非常浪费时间，而且可能跟上课冲突。而预报名则是填问卷星，拼手速。人手速再快也不过程序啊。从我开始用爬虫抢预报名后，未尝一败。我应该有一半的创分都是这么来的。</p><p>有神经网络的加持，模拟领域也不错。学会训练、使用Yolov5后，做过一个微信跳一跳的脚本，效果很不错。可惜的是，那时跳一跳已经不火了。还试过用图片分类网络判断原神里钓鱼的状态，从而实现半自动钓鱼。做的部落冲突辅助，也有一点深度神经网络在内。</p><p>内存修改领域，今天才算是入了门。</p><p>高三时，化学老师和我们说过，一些知识点，如果怎么搞都搞不懂，那就把它放一边，等你有了更丰富的知识储备后，再回来看，你会发现其实很简单。我还是挺认可这个说法的。一开始学爬虫的时候，真的是啥也不懂，也不明白教程里为什么那样做。而某一天，就像是突然开悟了一样，明白了教程里在讲什么、在做什么、为什么……以前学用CE找基址的时候，也是不明白为什么要那样做。现在，是慢慢理解了，还能看懂一些简单的汇编代码了。想来还是有点点感慨的。</p>]]></content>
    
    
    <categories>
      
      <category>编程</category>
      
    </categories>
    
    
    <tags>
      
      <tag>杂谈</tag>
      
      <tag>CE</tag>
      
      <tag>CSharp</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>文件重命名为MD5：从脚本到右键菜单</title>
    <link href="/2024/12/15/%E6%96%87%E4%BB%B6%E9%87%8D%E5%91%BD%E5%90%8D%E4%B8%BAMD5%EF%BC%9A%E4%BB%8E%E8%84%9A%E6%9C%AC%E5%88%B0%E5%8F%B3%E9%94%AE%E8%8F%9C%E5%8D%95/"/>
    <url>/2024/12/15/%E6%96%87%E4%BB%B6%E9%87%8D%E5%91%BD%E5%90%8D%E4%B8%BAMD5%EF%BC%9A%E4%BB%8E%E8%84%9A%E6%9C%AC%E5%88%B0%E5%8F%B3%E9%94%AE%E8%8F%9C%E5%8D%95/</url>
    
    <content type="html"><![CDATA[<p>有的时候希望将MD5直接作为文件名，于是就想实现这样一个功能：右键一个/多个文件时，菜单中出现一个选项：MD5Rename，点击后会将文件重命名为其MD5值</p><h2 id="编写脚本">编写脚本</h2><p>创建一个脚本来计算文件的 MD5 值并重命名文件</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> hashlib<br><span class="hljs-keyword">import</span> os<br><span class="hljs-keyword">import</span> sys<br><span class="hljs-keyword">import</span> tkinter.messagebox <span class="hljs-keyword">as</span> messagebox<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">get_file_md5</span>(<span class="hljs-params">file_path</span>):<br>    <span class="hljs-string">&quot;&quot;&quot;计算文件的MD5值&quot;&quot;&quot;</span><br>    md5_hash = hashlib.md5()<br>    <span class="hljs-keyword">try</span>:<br>        <span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(file_path, <span class="hljs-string">&#x27;rb&#x27;</span>) <span class="hljs-keyword">as</span> f:<br>            <span class="hljs-keyword">while</span> chunk := f.read(<span class="hljs-number">8192</span>):<br>                md5_hash.update(chunk)<br>        <span class="hljs-keyword">return</span> md5_hash.hexdigest()<br>    <span class="hljs-keyword">except</span> Exception <span class="hljs-keyword">as</span> e:<br>        messagebox.showerror(<span class="hljs-string">&quot;Error&quot;</span>, <span class="hljs-string">f&quot;Error reading file <span class="hljs-subst">&#123;file_path&#125;</span>: <span class="hljs-subst">&#123;e&#125;</span>&quot;</span>)<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">None</span><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">rename_file</span>(<span class="hljs-params">file_path</span>):<br>    <span class="hljs-string">&quot;&quot;&quot;将文件重命名为其MD5值&quot;&quot;&quot;</span><br>    md5_value = get_file_md5(file_path)<br>    <span class="hljs-keyword">if</span> md5_value:<br>        new_name = os.path.join(os.path.dirname(file_path), md5_value + os.path.splitext(file_path)[<span class="hljs-number">1</span>])<br>        <span class="hljs-keyword">try</span>:<br>            os.rename(file_path, new_name)<br>        <span class="hljs-keyword">except</span> Exception <span class="hljs-keyword">as</span> e:<br>            messagebox.showerror(<span class="hljs-string">&quot;Error&quot;</span>, <span class="hljs-string">f&quot;Error renaming file <span class="hljs-subst">&#123;file_path&#125;</span>: <span class="hljs-subst">&#123;e&#125;</span>&quot;</span>)<br>    <span class="hljs-keyword">else</span>:<br>        messagebox.showwarning(<span class="hljs-string">&quot;Warning&quot;</span>, <span class="hljs-string">f&quot;Could not compute MD5 for <span class="hljs-subst">&#123;file_path&#125;</span>&quot;</span>)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">main</span>():<br>    <span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(sys.argv) &lt; <span class="hljs-number">2</span>:<br>        messagebox.showwarning(<span class="hljs-string">&quot;Warning&quot;</span>, <span class="hljs-string">&quot;No files provided!&quot;</span>)<br>        <span class="hljs-keyword">return</span><br><br>    <span class="hljs-keyword">for</span> file_path <span class="hljs-keyword">in</span> sys.argv[<span class="hljs-number">1</span>:]:<br>        file_path = file_path.strip(<span class="hljs-string">&#x27;&quot;&#x27;</span>)<br>        <span class="hljs-keyword">if</span> os.path.isfile(file_path):<br>            rename_file(file_path)<br>        <span class="hljs-keyword">else</span>:<br>            messagebox.showwarning(<span class="hljs-string">&quot;Warning&quot;</span>, <span class="hljs-string">f&quot;<span class="hljs-subst">&#123;file_path&#125;</span> is not a valid file&quot;</span>)<br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&quot;__main__&quot;</span>:<br>    main()<br></code></pre></td></tr></table></figure><h2 id="注册右键菜单">注册右键菜单</h2><ol type="1"><li><p>打开注册表</p></li><li><p>来到<code>计算机\HKEY_CLASSES_ROOT\*\Shell\</code></p></li><li><p>新建一个项，命名为<code>MD5 Rename</code></p></li><li><p>在<code>MD5 Rename</code>下再新建一个项，命名为<code>command</code></p></li><li><p>双击 <code>command</code> 中的默认值，设置为要执行的命令</p><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs lsl"><span class="hljs-string">&quot;C:\path<span class="hljs-subst">\t</span>o\pythonw.exe&quot;</span> <span class="hljs-string">&quot;C:\path<span class="hljs-subst">\t</span>o\md5_rename.py&quot;</span> %<span class="hljs-number">1</span><br></code></pre></td></tr></table></figure></li></ol><h2 id="其他事项">其他事项</h2><ol type="1"><li>一定要填写完整的python路径，无论是否添加了环境变量</li><li>如果同时选中多个文件，并不会进入for循环</li><li>ChatGPT提供的方法中说， <code>%1</code> 替换为<code>%*</code>，可以实现批量操作。我尝试后，结果是并不可行</li></ol>]]></content>
    
    
    <categories>
      
      <category>计算机</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Python</tag>
      
      <tag>Windows</tag>
      
      <tag>注册表</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>删除打开方式中的多余项</title>
    <link href="/2024/11/28/%E5%88%A0%E9%99%A4%E6%89%93%E5%BC%80%E6%96%B9%E5%BC%8F%E4%B8%AD%E7%9A%84%E5%A4%9A%E4%BD%99%E9%A1%B9/"/>
    <url>/2024/11/28/%E5%88%A0%E9%99%A4%E6%89%93%E5%BC%80%E6%96%B9%E5%BC%8F%E4%B8%AD%E7%9A%84%E5%A4%9A%E4%BD%99%E9%A1%B9/</url>
    
    <content type="html"><![CDATA[<h2 id="特定文件">特定文件</h2><ol type="1"><li><p>打开注册表</p></li><li><p>来到<code>计算机\HKEY_CURRENT_USER\SOFTWARE\Microsoft\Windows\CurrentVersion\Explorer\FileExts\.文件后缀名\OpenWithList</code></p></li><li><p>在右侧窗口删除多余项即可。</p><figure><imgsrc="https://zuoguan-piclib-1257172707.cos.ap-guangzhou.myqcloud.com/%E5%88%A0%E9%99%A4%E6%89%93%E5%BC%80%E6%96%B9%E5%BC%8F%E4%B8%AD%E7%9A%84%E5%A4%9A%E4%BD%99%E9%A1%B9/image-20241128183922877.png"alt="image-20241128183922877" /><figcaption aria-hidden="true">image-20241128183922877</figcaption></figure></li></ol><h2 id="打开方式---更多应用">打开方式 - 更多应用</h2><ol type="1"><li><p>打开注册表</p></li><li><p>来到<code>计算机\HKEY_CURRENT_USER\SOFTWARE\Classes\Applications</code></p></li><li><p>删除其下的多余项</p><figure><imgsrc="https://zuoguan-piclib-1257172707.cos.ap-guangzhou.myqcloud.com/%E5%88%A0%E9%99%A4%E6%89%93%E5%BC%80%E6%96%B9%E5%BC%8F%E4%B8%AD%E7%9A%84%E5%A4%9A%E4%BD%99%E9%A1%B9/image-20241128184303381.png"alt="image-20241128184303381" /><figcaption aria-hidden="true">image-20241128184303381</figcaption></figure></li></ol>]]></content>
    
    
    <categories>
      
      <category>计算机</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Windows</tag>
      
      <tag>注册表</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>硬盘坏了之后...</title>
    <link href="/2024/11/20/%E7%A1%AC%E7%9B%98%E5%9D%8F%E4%BA%86%E4%B9%8B%E5%90%8E/"/>
    <url>/2024/11/20/%E7%A1%AC%E7%9B%98%E5%9D%8F%E4%BA%86%E4%B9%8B%E5%90%8E/</url>
    
    <content type="html"><![CDATA[<p>近期我的电脑出现了频繁蓝屏的状况，于是自己备份了一下C盘里的文件，然后拿去维修店里修。但令我没想到的是，这次居然是硬盘坏了（不确定这就是病根，还是是维修过程中损坏的）。我的代码（只有几个项目提交到了Github上）以及博客是存放在D盘的。</p><h2 id="博客">博客</h2><p>因为最近有在用<code>Vue</code>做一些项目，非常好用，爱不释手，所以萌生了用<code>Vue</code>搭建博客的想法。而且，将<code>Vue</code>项目Push到Github上，Netlify可以自动构建项目。将来电脑又坏了，直接把项目Pull下来又能继续用了。但是想到要构建一整个博客，工作量和一些目前没有解决思路的问题，成功地把我劝退了。</p><p>所以还是继续使用<code>Hexo</code>吧。不过在用的主题有一个小点让我不是很满意，就是自动摘要的话，代码部分会先显示行号，再显示代码，也就是<code>1234567891011</code>这样的数字串后面接代码，看着很不舒服。不过这不是主题的问题，而是<code>Hexo</code>Api的问题。想找一个不显示摘要内容的主题，但没找到合适的。只能使用原主题然后不显示摘要。</p><p>最后花了大半个下午的时间，重新搭建了博客。</p><h2 id="stylebot">StyleBot</h2><p>很久之前用的是百度搜索引擎，配合着<ahref="https://greasyfork.org/zh-CN/scripts/14178-ac-baidu-重定向优化百度搜狗谷歌必应搜索-favicon-双列">AC-baidu-重定向优化百度搜狗谷歌必应搜索_favicon_双列</a>这个脚本。</p><p>后来换成了duckduckgo搜索引擎，这个脚本说是也支持，但是视乎是有Bug的，实现不了单列居中。但是我的审美已经改变了，受不了原本的布局，然后就自己写了一个油猴脚本。</p><p>但是现在要处理的事情挺多，又不记得油猴脚本的那些规范了，懒得去查了，就找了一个可以修改指定网站css的插件，就是<code>Styebot</code>。用起来感觉很不错，安利一下。</p><h2 id="因祸得福">因祸得福？</h2><p>这个电脑的C盘红了有一段时间了。尝试过将一些文件通过软链接的方法，移动到D盘，但是很快又红了。也设想了一些方法解决，不过可行性太低了。这次直接换一个硬盘，也确实是解决了这个问题。。。并且这次硬盘没有分区，只有一个C盘，应该就没有那么容易红了。</p><p>在半年前电脑也出现过问题，然后重装了一个盗版的系统，有精神洁癖，用得不是很舒服。这次装的是原厂的系统，不仅正版，原生的软件也回来了。</p>]]></content>
    
    
    <categories>
      
      <category>其他</category>
      
    </categories>
    
    
    <tags>
      
      <tag>博客</tag>
      
      <tag>杂谈</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>在PowerShell中启用代理</title>
    <link href="/2024/11/20/%E5%9C%A8PowerShell%E4%B8%AD%E5%90%AF%E7%94%A8%E4%BB%A3%E7%90%86/"/>
    <url>/2024/11/20/%E5%9C%A8PowerShell%E4%B8%AD%E5%90%AF%E7%94%A8%E4%BB%A3%E7%90%86/</url>
    
    <content type="html"><![CDATA[<p>在<code>$PROFILE</code>中添加如下代码： <figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs powershell"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Enable-Proxy</span></span> &#123;<br>    <span class="hljs-variable">$internet_setting</span> = <span class="hljs-built_in">Get-ItemProperty</span> <span class="hljs-literal">-Path</span> <span class="hljs-string">&#x27;HKCU:\Software\Microsoft\Windows\CurrentVersion\Internet Settings&#x27;</span><br>    <span class="hljs-keyword">if</span> (<span class="hljs-variable">$internet_setting</span>.ProxyEnable <span class="hljs-operator">-eq</span> <span class="hljs-number">1</span>) &#123;<br>        <span class="hljs-variable">$env:HTTP_PROXY</span> = <span class="hljs-string">&quot;http://<span class="hljs-variable">$</span>(<span class="hljs-variable">$internet_setting</span>.ProxyServer)&quot;</span><br>        <span class="hljs-variable">$env:HTTPS_PROXY</span> = <span class="hljs-string">&quot;http://<span class="hljs-variable">$</span>(<span class="hljs-variable">$internet_setting</span>.ProxyServer)&quot;</span><br>    &#125;<br>    <span class="hljs-built_in">Remove-Variable</span> <span class="hljs-literal">-Name</span> internet_setting<br>&#125;<br><br><span class="hljs-built_in">Enable-Proxy</span><br></code></pre></td></tr></table></figure>启动终端时，如果代理已开启，则会在PowerShell中启用代理。</p><p>如果启动时未开启，可在开启后执行以下命令 <figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs powershell"><span class="hljs-built_in">Enable-Proxy</span><br></code></pre></td></tr></table></figure></p>]]></content>
    
    
    <categories>
      
      <category>计算机</category>
      
    </categories>
    
    
    <tags>
      
      <tag>代理</tag>
      
      <tag>Powershell</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>快速搭建一个Local File Server</title>
    <link href="/2024/11/20/%E5%BF%AB%E9%80%9F%E6%90%AD%E5%BB%BA%E4%B8%80%E4%B8%AALocal-File-Server/"/>
    <url>/2024/11/20/%E5%BF%AB%E9%80%9F%E6%90%AD%E5%BB%BA%E4%B8%80%E4%B8%AALocal-File-Server/</url>
    
    <content type="html"><![CDATA[<p>最近整了一些里番，打算细细评鉴。当然是躺在床上评鉴最为惬意。虽然有移动硬盘，也有转接头，但是似乎是华为手机的问题，连上后会自动生成一些文件，而且还难以删除，我接受不了。因为在家里，手机和电脑在同一局域网，那就用Python搭建一个本地文件服务器好了。</p><h2 id="代码实现">代码实现</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> flask <span class="hljs-keyword">import</span> Flask, send_file, abort, render_template_string<br><span class="hljs-keyword">from</span> gevent.pywsgi <span class="hljs-keyword">import</span> WSGIServer<br><span class="hljs-keyword">import</span> os<br><span class="hljs-keyword">import</span> socket<br><span class="hljs-keyword">import</span> qrcode<br><br>app = Flask(__name__)<br><br><br>HTML_TEMPLATE = <span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">&lt;!DOCTYPE html&gt;</span><br><span class="hljs-string">&lt;html lang=&quot;zh&quot;&gt;</span><br><span class="hljs-string">&lt;head&gt;</span><br><span class="hljs-string">    &lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class="hljs-string">    &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt;</span><br><span class="hljs-string">    &lt;link href=&quot;https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/css/bootstrap.min.css&quot; rel=&quot;stylesheet&quot; integrity=&quot;sha384-QWTKZyjpPEjISv5WaRU9OFeRpok6YctnYmDr5pNlyT2bRjXh0JMhjY6hW+ALEwIH&quot; crossorigin=&quot;anonymous&quot;&gt;</span><br><span class="hljs-string">    &lt;title&gt;Local File Server&lt;/title&gt;</span><br><span class="hljs-string">    &lt;style&gt;</span><br><span class="hljs-string">        a &#123; color: #007bff; text-decoration: none; &#125;</span><br><span class="hljs-string">        a:visited &#123; color: #007bff; &#125;</span><br><span class="hljs-string">    &lt;/style&gt;</span><br><span class="hljs-string">&lt;/head&gt;</span><br><span class="hljs-string">&lt;body&gt;</span><br><span class="hljs-string">    &lt;div class=&quot;container&quot;&gt;</span><br><span class="hljs-string">            &lt;table class=&quot;table table-hover&quot;&gt;</span><br><span class="hljs-string">        &lt;thead&gt;</span><br><span class="hljs-string">            &lt;tr&gt;</span><br><span class="hljs-string">                &lt;th&gt;File Name&lt;/th&gt;</span><br><span class="hljs-string">            &lt;/tr&gt;</span><br><span class="hljs-string">        &lt;/thead&gt;</span><br><span class="hljs-string">        </span><br><span class="hljs-string">        &lt;tbody&gt;</span><br><span class="hljs-string">            &#123;% for file in files %&#125;</span><br><span class="hljs-string">                &lt;tr&gt;</span><br><span class="hljs-string">                    &lt;td&gt;&lt;a href=&quot;/&#123;&#123; file[1] &#125;&#125;&quot;&gt;&#123;&#123; file[0] &#125;&#125;&lt;/a&gt;&lt;/td&gt;</span><br><span class="hljs-string">                &lt;/tr&gt;</span><br><span class="hljs-string">            &#123;% endfor %&#125;</span><br><span class="hljs-string">        &lt;/tbody&gt;</span><br><span class="hljs-string">    &lt;/table&gt;</span><br><span class="hljs-string">    &lt;/div&gt;</span><br><span class="hljs-string">&lt;/body&gt;</span><br><span class="hljs-string">&lt;/html&gt;</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><br><br><span class="hljs-meta">@app.route(<span class="hljs-params"><span class="hljs-string">&#x27;/&lt;path:filename&gt;&#x27;</span></span>)</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">serve_file</span>(<span class="hljs-params">filename</span>):<br>    <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> os.path.exists(filename):<br>        abort(<span class="hljs-number">404</span>)<br><br>    <span class="hljs-keyword">if</span> os.path.isfile(filename):<br>        <span class="hljs-keyword">return</span> send_file(os.path.join(os.getcwd(), filename))<br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-keyword">return</span> render_template(filename)<br><br><br><span class="hljs-meta">@app.route(<span class="hljs-params"><span class="hljs-string">&#x27;/&#x27;</span></span>)</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">index</span>():<br>    <span class="hljs-keyword">return</span> render_template(<span class="hljs-string">&quot;./&quot;</span>)<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">render_template</span>(<span class="hljs-params">path</span>):<br>    files = os.listdir(path)<br>    files_path = <span class="hljs-built_in">map</span>(<br>        <span class="hljs-keyword">lambda</span> file: os.path.join(path, file), files<br>    )<br><br>    <span class="hljs-keyword">return</span> render_template_string(HTML_TEMPLATE, files=<span class="hljs-built_in">zip</span>(files, files_path))<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">get_local_ip</span>():<br>    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)<br>    sock.connect((<span class="hljs-string">&quot;8.8.8.8&quot;</span>, <span class="hljs-number">80</span>))<br>    local_ip = sock.getsockname()[<span class="hljs-number">0</span>]<br><br>    <span class="hljs-keyword">return</span> local_ip<br><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    ip = get_local_ip()<br>    port = <span class="hljs-number">1128</span><br><br>    url = <span class="hljs-string">&quot;http://&#123;&#125;:&#123;&#125;&quot;</span>.<span class="hljs-built_in">format</span>(ip, port)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Server running at &#123;&#125;&quot;</span>.<span class="hljs-built_in">format</span>(url))<br><br>    qr = qrcode.QRCode(<br>        version=<span class="hljs-number">5</span>,<br>        error_correction=qrcode.constants.ERROR_CORRECT_Q,<br>        box_size=<span class="hljs-number">10</span>,<br>        border=<span class="hljs-number">4</span>,<br>    )<br>    qr.add_data(url)<br>    qr.print_ascii()<br><br>    http_server = WSGIServer((<span class="hljs-string">&#x27;0.0.0.0&#x27;</span>, port), app, log=<span class="hljs-literal">None</span>)<br>    http_server.serve_forever()<br></code></pre></td></tr></table></figure><h2 id="一些小问题">一些小问题</h2><p>测试时一切顺利。然而，到了晚上，我要开始细细品鉴时，却发现手机无法访问，而电脑端可以正常访问。</p><p>经过排查与测试，原因很可能时这样的：程序第一次运行的时候，Windows会询问是否允许通过防火墙，允许后即可正常运行。第二次运行就不会再询问了。但是，因为程序是在移动硬盘里的，重新连接移动硬盘后，一些奇奇怪怪的、我也不太清楚的机制，使得这个程序没有被运行通过防火墙了。</p><p>我的解决方法就是新建一个<code>入站规则</code>，让<code>1128</code>端口总是允许连接（特意选的一个不常见的端口号）。</p>]]></content>
    
    
    <categories>
      
      <category>编程</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Python</tag>
      
      <tag>防火墙</tag>
      
      <tag>Flask</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Photoshop弹出软件未授权弹窗的解决方法</title>
    <link href="/2024/11/20/Photoshop%E5%BC%B9%E5%87%BA%E8%BD%AF%E4%BB%B6%E6%9C%AA%E6%8E%88%E6%9D%83%E5%BC%B9%E7%AA%97%E7%9A%84%E8%A7%A3%E5%86%B3%E6%96%B9%E6%B3%95/"/>
    <url>/2024/11/20/Photoshop%E5%BC%B9%E5%87%BA%E8%BD%AF%E4%BB%B6%E6%9C%AA%E6%8E%88%E6%9D%83%E5%BC%B9%E7%AA%97%E7%9A%84%E8%A7%A3%E5%86%B3%E6%96%B9%E6%B3%95/</url>
    
    <content type="html"><![CDATA[<p>最近我的Photoshop出现了未授权的弹窗</p><figure><imgsrc="https://zuoguan-piclib-1257172707.cos.ap-guangzhou.myqcloud.com/解决Photoshop弹出软件未授权弹窗的方法/84d9803f798bb883db57cf3c716f581e79dbd444.jpg@1256w_978h_!web-article-pic.avif"alt="弹窗" /><figcaption aria-hidden="true">弹窗</figcaption></figure><p>解决方法的基本思路就是阻止Photoshop联网。</p><h2 id="防火墙">防火墙</h2><p>【控制面板】-&gt;【Windows Defender防火墙】-&gt;【高级设置】-&gt;【出站规则】-&gt;【新建规则】-&gt;【程序，下一页】-&gt;【Photoshop.exe路径，下一页】-&gt;【阻止连接，下一页】-&gt;【全选，下一页】-&gt;【填写名称，完成】<imgsrc="https://zuoguan-piclib-1257172707.cos.ap-guangzhou.myqcloud.com/解决Photoshop弹出软件未授权弹窗的方法/image-20240904123826397.png" /><imgsrc="https://zuoguan-piclib-1257172707.cos.ap-guangzhou.myqcloud.com/解决Photoshop弹出软件未授权弹窗的方法/image-20240904123931363.png" /><imgsrc="https://zuoguan-piclib-1257172707.cos.ap-guangzhou.myqcloud.com/解决Photoshop弹出软件未授权弹窗的方法/image-20240904124011597.png" /></p><h2 id="clash">Clash</h2><p>在使用Clash时，会绕过防火墙，导致上述方法失效，需要在Clash中配置规则。</p><p>【Clash】-&gt;【Settings】-&gt;【Profiles】-&gt;【Parsers】-&gt;【Edit】<figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">parsers:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-attr">url:</span> <span class="hljs-string">订阅链接</span><br>    <span class="hljs-attr">yaml:</span><br>      <span class="hljs-attr">prepend-rules:</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-string">PROCESS-NAME,Photoshop.exe,REJECT</span><br></code></pre></td></tr></table></figure></p>]]></content>
    
    
    <categories>
      
      <category>计算机</category>
      
    </categories>
    
    
    <tags>
      
      <tag>代理</tag>
      
      <tag>Photoshop</tag>
      
      <tag>防火墙</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>软链接</title>
    <link href="/2024/11/20/%E8%BD%AF%E9%93%BE%E6%8E%A5/"/>
    <url>/2024/11/20/%E8%BD%AF%E9%93%BE%E6%8E%A5/</url>
    
    <content type="html"><![CDATA[<p>第一次了解到软链接，是在这个视频：<ahref="https://www.bilibili.com/video/BV1Ct411P7ma/">黑科技？你不知道的一种快捷方式，没有空间占用。在这种快捷方式面前，普通的快捷方式都是弟弟</a>。</p><p>最近，电脑的C盘又红了，就想着把一些大文件移到D盘，然后再用软链接映射回C盘原本的位置。但是PowerShell里没有mklink这个命令，需要用<code>New-Item</code>，遂记录一下。</p><p>现在我将<code>C:\Users\zuoguan\.nuget</code>剪切至<code>D:\.nuget</code></p><p>创建软链接：</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs powershell"><span class="hljs-built_in">New-Item</span> <span class="hljs-literal">-ItemType</span> SymbolicLink <span class="hljs-literal">-Path</span> <span class="hljs-string">&quot;C:\Users\zuoguan\.nuget&quot;</span> <span class="hljs-literal">-Target</span> <span class="hljs-string">&quot;D:\.nuget&quot;</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>计算机</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Windows</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Python实现分段下载器</title>
    <link href="/2024/11/20/Python%E5%AE%9E%E7%8E%B0%E5%88%86%E6%AE%B5%E4%B8%8B%E8%BD%BD%E5%99%A8/"/>
    <url>/2024/11/20/Python%E5%AE%9E%E7%8E%B0%E5%88%86%E6%AE%B5%E4%B8%8B%E8%BD%BD%E5%99%A8/</url>
    
    <content type="html"><![CDATA[<h2 id="range参数">Range参数</h2><p><code>header</code>中的<code>Range</code>参数：允许客户端请求服务器发送部分资源，而不是整个资源，是实现分段下载的关键。</p><p>格式如下： <figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;Range&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;bytes=&lt;start&gt;-&lt;end&gt;&quot;</span><br><span class="hljs-punctuation">&#125;</span><br><span class="hljs-comment">// 前闭后闭</span><br></code></pre></td></tr></table></figure>只有在响应头中<code>Accept-Range</code>参数为<code>bytes</code>才有效</p><h2 id="head请求">HEAD请求</h2><p><code>HEAD</code>请求方法与<code>GET</code>方法非常相似，但是在服务器响应中只返回头部信息，而不返回实际资源的主体部分。</p><p>我们可以用HEAD请求先获取响应头，判断是否支持分段下载以及资源总大小。</p><h2 id="demo">Demo</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> httpx<br><span class="hljs-keyword">import</span> threading<br><span class="hljs-keyword">from</span> urllib.request <span class="hljs-keyword">import</span> getproxies<br><span class="hljs-keyword">from</span> concurrent.futures <span class="hljs-keyword">import</span> ThreadPoolExecutor, wait, ALL_COMPLETED<br><span class="hljs-keyword">from</span> rich.progress <span class="hljs-keyword">import</span> BarColumn, DownloadColumn, Progress, TextColumn, TimeRemainingColumn, TransferSpeedColumn<br><span class="hljs-keyword">from</span> rich.console <span class="hljs-keyword">import</span> Console<br><span class="hljs-keyword">from</span> typing <span class="hljs-keyword">import</span> <span class="hljs-type">Union</span>, <span class="hljs-type">Tuple</span>, <span class="hljs-type">Dict</span><br><span class="hljs-keyword">import</span> os<br><span class="hljs-keyword">import</span> re<br><span class="hljs-keyword">import</span> hashlib<br><span class="hljs-keyword">import</span> shutil<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">parse_filename_from_url</span>(<span class="hljs-params">url: <span class="hljs-built_in">str</span></span>) -&gt; <span class="hljs-type">Union</span>[<span class="hljs-built_in">str</span>, <span class="hljs-literal">None</span>]:<br>    <span class="hljs-keyword">match</span> = re.search(<span class="hljs-string">r&#x27;/([^/]+\.\w+)(?:\?.*)?$&#x27;</span>, url)<br>    <span class="hljs-keyword">if</span> <span class="hljs-keyword">match</span>:<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">match</span>.group(<span class="hljs-number">1</span>)<br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">None</span><br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">md5_encrypt</span>(<span class="hljs-params">text: <span class="hljs-built_in">str</span></span>) -&gt; <span class="hljs-built_in">str</span>:<br>    md5 = hashlib.md5()<br>    md5.update(text.encode(<span class="hljs-string">&#x27;utf-8&#x27;</span>))<br><br>    <span class="hljs-keyword">return</span> md5.hexdigest()<br><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Downloader</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params"></span><br><span class="hljs-params">            self, url: <span class="hljs-built_in">str</span>,</span><br><span class="hljs-params">            n_workers: <span class="hljs-built_in">int</span> = <span class="hljs-number">8</span>,</span><br><span class="hljs-params">            dest_dir: <span class="hljs-built_in">str</span> = <span class="hljs-string">&quot;./&quot;</span>,</span><br><span class="hljs-params">            filename: <span class="hljs-type">Union</span>[<span class="hljs-built_in">str</span>, <span class="hljs-literal">None</span>] = <span class="hljs-literal">None</span>,</span><br><span class="hljs-params">            headers: <span class="hljs-type">Union</span>[<span class="hljs-type">Dict</span>, <span class="hljs-literal">None</span>] = <span class="hljs-literal">None</span>,</span><br><span class="hljs-params">            proxy: <span class="hljs-type">Union</span>[<span class="hljs-built_in">str</span>, <span class="hljs-literal">None</span>] = <span class="hljs-literal">None</span>,</span><br><span class="hljs-params">            **other_http_params</span><br><span class="hljs-params">    </span>):<br>        <span class="hljs-variable language_">self</span>.url = url<br>        <span class="hljs-variable language_">self</span>.n_workers = n_workers<br>        <span class="hljs-variable language_">self</span>.dest_dir = dest_dir<br><br>        <span class="hljs-keyword">if</span> filename <span class="hljs-keyword">is</span> <span class="hljs-literal">None</span>:<br>            filename = parse_filename_from_url(<span class="hljs-variable language_">self</span>.url)<br>            <span class="hljs-keyword">if</span> filename <span class="hljs-keyword">is</span> <span class="hljs-literal">None</span>:<br>                filename = md5_encrypt(<span class="hljs-variable language_">self</span>.url) + <span class="hljs-string">&quot;.bin&quot;</span><br>        <span class="hljs-variable language_">self</span>.filename = filename<br><br>        <span class="hljs-keyword">if</span> headers <span class="hljs-keyword">is</span> <span class="hljs-literal">None</span>:<br>            headers = &#123;<br>                <span class="hljs-string">&quot;User-Agent&quot;</span>: <span class="hljs-string">&quot;Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) &quot;</span><br>                              <span class="hljs-string">&quot;Chrome/102.0.0.0 Safari/537.36&quot;</span>,<br>            &#125;<br>        <span class="hljs-variable language_">self</span>.headers = headers<br><br>        <span class="hljs-keyword">if</span> proxy <span class="hljs-keyword">is</span> <span class="hljs-literal">None</span>:<br>            proxy = getproxies().get(<span class="hljs-string">&quot;http&quot;</span>)<br>        <span class="hljs-variable language_">self</span>.proxy = proxy<br><br>        <span class="hljs-variable language_">self</span>.other_http_params = other_http_params<br><br>        <span class="hljs-variable language_">self</span>.lock = threading.Lock()<br>        <span class="hljs-variable language_">self</span>.console = Console()<br>        <span class="hljs-variable language_">self</span>.progress = Progress(<br>            TextColumn(<span class="hljs-string">&quot;[bold blue]Downloading[/bold blue]&quot;</span>, justify=<span class="hljs-string">&quot;right&quot;</span>),<br>            BarColumn(bar_width=<span class="hljs-literal">None</span>),<br>            <span class="hljs-string">&quot;[progress.percentage]&#123;task.percentage:&gt;3.1f&#125;%&quot;</span>,<br>            <span class="hljs-string">&quot;•&quot;</span>,<br>            DownloadColumn(),<br>            <span class="hljs-string">&quot;•&quot;</span>,<br>            TransferSpeedColumn(),<br>            <span class="hljs-string">&quot;•&quot;</span>,<br>            TimeRemainingColumn(),<br>        )<br>        <span class="hljs-variable language_">self</span>.task = <span class="hljs-literal">None</span><br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">download_chunk</span>(<span class="hljs-params">self, headers: <span class="hljs-type">Dict</span>[<span class="hljs-built_in">str</span>, <span class="hljs-built_in">str</span>], path: <span class="hljs-type">Union</span>[<span class="hljs-literal">None</span>, <span class="hljs-built_in">str</span>] = <span class="hljs-literal">None</span></span>) -&gt; <span class="hljs-type">Union</span>[<span class="hljs-literal">None</span>, <span class="hljs-built_in">bytes</span>]:<br>        <span class="hljs-keyword">if</span> path <span class="hljs-keyword">is</span> <span class="hljs-keyword">not</span> <span class="hljs-literal">None</span>:<br>            <span class="hljs-keyword">with</span> httpx.stream(<br>                    <span class="hljs-string">&quot;GET&quot;</span>, <span class="hljs-variable language_">self</span>.url, headers=headers, proxy=<span class="hljs-variable language_">self</span>.proxy,<br>                    follow_redirects=<span class="hljs-literal">True</span>, timeout=<span class="hljs-number">30</span>, **<span class="hljs-variable language_">self</span>.other_http_params<br>            ) <span class="hljs-keyword">as</span> r:<br>                <span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(path, <span class="hljs-string">&quot;wb&quot;</span>) <span class="hljs-keyword">as</span> dest_file:<br>                    <span class="hljs-keyword">for</span> data <span class="hljs-keyword">in</span> r.iter_bytes():<br>                        dest_file.write(data)<br>                        <span class="hljs-keyword">with</span> <span class="hljs-variable language_">self</span>.lock:<br>                            <span class="hljs-variable language_">self</span>.progress.update(<span class="hljs-variable language_">self</span>.task, advance=<span class="hljs-built_in">len</span>(data))<br><br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">None</span><br>        <span class="hljs-keyword">else</span>:<br>            content = <span class="hljs-string">b&#x27;&#x27;</span><br>            <span class="hljs-keyword">with</span> httpx.stream(<br>                    <span class="hljs-string">&quot;GET&quot;</span>, <span class="hljs-variable language_">self</span>.url, headers=headers, proxy=<span class="hljs-variable language_">self</span>.proxy,<br>                    follow_redirects=<span class="hljs-literal">True</span>, timeout=<span class="hljs-number">30</span>, **<span class="hljs-variable language_">self</span>.other_http_params<br>            ) <span class="hljs-keyword">as</span> r:<br>                <span class="hljs-keyword">for</span> data <span class="hljs-keyword">in</span> r.iter_bytes():<br>                    content += data<br>                    <span class="hljs-keyword">with</span> <span class="hljs-variable language_">self</span>.lock:<br>                        <span class="hljs-variable language_">self</span>.progress.update(<span class="hljs-variable language_">self</span>.task, advance=<span class="hljs-built_in">len</span>(data))<br><br>            <span class="hljs-keyword">return</span> content<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">download</span>(<span class="hljs-params">self</span>):<br>        response = httpx.head(<br>            <span class="hljs-variable language_">self</span>.url, headers=<span class="hljs-variable language_">self</span>.headers, proxy=<span class="hljs-variable language_">self</span>.proxy,<br>            follow_redirects=<span class="hljs-literal">True</span>, timeout=<span class="hljs-number">30</span>, **<span class="hljs-variable language_">self</span>.other_http_params<br>        )<br>        total_size = <span class="hljs-built_in">int</span>(response.headers[<span class="hljs-string">&#x27;Content-Length&#x27;</span>])<br><br>        <span class="hljs-keyword">if</span> (<br>                <span class="hljs-string">&quot;Accept-Ranges&quot;</span> <span class="hljs-keyword">in</span> response.headers <span class="hljs-keyword">and</span><br>                response.headers[<span class="hljs-string">&quot;Accept-Ranges&quot;</span>].lower() == <span class="hljs-string">&quot;bytes&quot;</span> <span class="hljs-keyword">and</span><br>                total_size &gt; <span class="hljs-number">10</span> * <span class="hljs-number">1024</span> * <span class="hljs-number">1024</span><br>        ):<br>            chunk_size = total_size // <span class="hljs-variable language_">self</span>.n_workers<br>            splits = (<br>                    [(<span class="hljs-number">0</span>, chunk_size)] +<br>                    [(i * chunk_size + <span class="hljs-number">1</span>, (i + <span class="hljs-number">1</span>) * chunk_size) <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>, <span class="hljs-variable language_">self</span>.n_workers-<span class="hljs-number">1</span>)] +<br>                    [(chunk_size * (<span class="hljs-variable language_">self</span>.n_workers-<span class="hljs-number">1</span>) + <span class="hljs-number">1</span>, total_size)]<br>            )<br><br>            <span class="hljs-keyword">if</span> total_size &gt; <span class="hljs-number">100</span> * <span class="hljs-number">1024</span> * <span class="hljs-number">1024</span>:<br>                <span class="hljs-keyword">with</span> <span class="hljs-variable language_">self</span>.progress:<br>                    <span class="hljs-variable language_">self</span>.task = <span class="hljs-variable language_">self</span>.progress.add_task(<span class="hljs-string">&quot;download&quot;</span>, total=total_size, filename=<span class="hljs-variable language_">self</span>.filename)<br>                    <span class="hljs-keyword">with</span> ThreadPoolExecutor(max_workers=<span class="hljs-variable language_">self</span>.n_workers) <span class="hljs-keyword">as</span> pool:<br>                        all_task = [<br>                            pool.submit(<br>                                <span class="hljs-variable language_">self</span>.download_chunk,<br>                                <span class="hljs-variable language_">self</span>.add_range(split),<br>                                os.path.join(<span class="hljs-variable language_">self</span>.dest_dir, <span class="hljs-string">f&quot;<span class="hljs-subst">&#123;self.filename&#125;</span>_<span class="hljs-subst">&#123;i&#125;</span>&quot;</span>)<br>                            ) <span class="hljs-keyword">for</span> (i, split) <span class="hljs-keyword">in</span> <span class="hljs-built_in">enumerate</span>(splits)<br>                        ]<br><br>                        wait(all_task, return_when=ALL_COMPLETED)<br>                        <span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(os.path.join(<span class="hljs-variable language_">self</span>.dest_dir, <span class="hljs-variable language_">self</span>.filename), <span class="hljs-string">&quot;wb&quot;</span>) <span class="hljs-keyword">as</span> concatenated_file:<br>                            <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-variable language_">self</span>.n_workers):<br>                                <span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(os.path.join(<span class="hljs-variable language_">self</span>.dest_dir, <span class="hljs-string">f&quot;<span class="hljs-subst">&#123;self.filename&#125;</span>_<span class="hljs-subst">&#123;i&#125;</span>&quot;</span>), <span class="hljs-string">&quot;rb&quot;</span>) <span class="hljs-keyword">as</span> file:<br>                                    shutil.copyfileobj(file, concatenated_file)<br>                                os.remove(os.path.join(<span class="hljs-variable language_">self</span>.dest_dir, <span class="hljs-string">f&quot;<span class="hljs-subst">&#123;self.filename&#125;</span>_<span class="hljs-subst">&#123;i&#125;</span>&quot;</span>))<br><br>            <span class="hljs-keyword">else</span>:<br>                <span class="hljs-keyword">with</span> <span class="hljs-variable language_">self</span>.progress:<br>                    <span class="hljs-variable language_">self</span>.task = <span class="hljs-variable language_">self</span>.progress.add_task(<span class="hljs-string">&quot;download&quot;</span>, total=total_size, filename=<span class="hljs-variable language_">self</span>.filename)<br><br>                    <span class="hljs-keyword">with</span> ThreadPoolExecutor(max_workers=<span class="hljs-variable language_">self</span>.n_workers) <span class="hljs-keyword">as</span> pool:<br>                        all_task = [pool.submit(<span class="hljs-variable language_">self</span>.download_chunk, <span class="hljs-variable language_">self</span>.add_range(split), <span class="hljs-literal">None</span>) <span class="hljs-keyword">for</span> split <span class="hljs-keyword">in</span> splits]<br><br>                        content = <span class="hljs-string">b&#x27;&#x27;</span><br>                        <span class="hljs-keyword">for</span> task <span class="hljs-keyword">in</span> all_task:<br>                            content += task.result()<br><br>                        <span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(os.path.join(<span class="hljs-variable language_">self</span>.dest_dir, <span class="hljs-variable language_">self</span>.filename), <span class="hljs-string">&quot;wb&quot;</span>) <span class="hljs-keyword">as</span> f:<br>                            f.write(content)<br>        <span class="hljs-keyword">else</span>:<br>            <span class="hljs-keyword">with</span> <span class="hljs-variable language_">self</span>.progress:<br>                <span class="hljs-variable language_">self</span>.task = <span class="hljs-variable language_">self</span>.progress.add_task(<span class="hljs-string">&quot;download&quot;</span>, total=total_size, filename=<span class="hljs-variable language_">self</span>.filename)<br>                <span class="hljs-variable language_">self</span>.download_chunk(<span class="hljs-variable language_">self</span>.headers, os.path.join(<span class="hljs-variable language_">self</span>.dest_dir, <span class="hljs-variable language_">self</span>.filename))<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">add_range</span>(<span class="hljs-params">self, split: <span class="hljs-type">Tuple</span>[<span class="hljs-built_in">int</span>, <span class="hljs-built_in">int</span>]</span>) -&gt; <span class="hljs-type">Dict</span>[<span class="hljs-built_in">str</span>, <span class="hljs-built_in">str</span>]:<br>        headers = <span class="hljs-variable language_">self</span>.headers.copy()<br>        headers[<span class="hljs-string">&quot;Range&quot;</span>] = <span class="hljs-string">f&quot;bytes=<span class="hljs-subst">&#123;split[<span class="hljs-number">0</span>]&#125;</span>-<span class="hljs-subst">&#123;split[<span class="hljs-number">1</span>]&#125;</span>&quot;</span><br><br>        <span class="hljs-keyword">return</span> headers<br></code></pre></td></tr></table></figure><p>以上是一个简易的demo，与IDM等成熟的下载相比，是有很多缺陷的：</p><ol type="1"><li><p>一个线程下载结束后，不会去下载其他线程还未下载的部分</p></li><li><p>下载中断后需要重新下载</p></li></ol>]]></content>
    
    
    <categories>
      
      <category>编程</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Python</tag>
      
      <tag>爬虫</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>部落冲突辅助</title>
    <link href="/2024/11/20/%E9%83%A8%E8%90%BD%E5%86%B2%E7%AA%81%E8%BE%85%E5%8A%A9/"/>
    <url>/2024/11/20/%E9%83%A8%E8%90%BD%E5%86%B2%E7%AA%81%E8%BE%85%E5%8A%A9/</url>
    
    <content type="html"><![CDATA[<p>最近在重新开始玩部落冲突这款游戏。在高中时期，我非常喜欢这款游戏。当时我就想写一个脚本帮我自动搜鱼，搜到鱼后提示我，我就在一旁写作业。或者甚至能自动打鱼。当时技术有限，做了一个凑活能用的。现在想再次尝试实现一下。先从数字识别做起。</p><h2 id="airtest">Airtest</h2><p>在高中时期遇到的第一个难题就是：捏合缩放，用于把地图缩小。当时是使用ADB控制手机，研究了很久发现无法实现，最后只能在每次脚本运行前，手动将地图缩小。</p><p>现在了解到<code>Airtest</code>可以轻松地做到。此外，<code>Airtest</code>还提供了其他丰富的API，使得连接设备、截图等操作能轻松实现。</p><h2 id="数字识别">数字识别</h2><p>高中时期遇到的第二个难题是：数字识别。事实上，当时我已经实现了将图片二值化，然后裁剪出每一个数字。只要将裁剪出的数字和模板计算相似度，就能够完成数字识别的任务了。不记得当时遇到了什么阻碍，最后是调用百度文字识别OCR的API完成的。</p><p>现在学习了深度学习，对于这样的图像分类任务，简直是小菜一碟。</p><h3 id="二值化">二值化</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> cv2<br><span class="hljs-keyword">import</span> numpy<br><br><span class="hljs-comment"># 图片裁剪</span><br>ResourceArea = (<span class="hljs-number">126</span>, <span class="hljs-number">100</span>, <span class="hljs-number">286</span>, <span class="hljs-number">165</span>)<br><br>im = cv2.imread(<span class="hljs-string">&quot;snapshot.png&quot;</span>)<br>im = im[ResourceArea[<span class="hljs-number">1</span>]:ResourceArea[<span class="hljs-number">3</span>], ResourceArea[<span class="hljs-number">0</span>]:ResourceArea[<span class="hljs-number">2</span>]]<br><br><span class="hljs-comment"># 二值化</span><br>im = cv2.cvtColor(im, cv2.COLOR_BGR2GRAY)<br>_, im = cv2.threshold(im, <span class="hljs-number">195</span>, <span class="hljs-number">255</span>, cv2.THRESH_BINARY)<br><br>kernel = numpy.ones((<span class="hljs-number">3</span>, <span class="hljs-number">3</span>), numpy.uint8)<br>im = cv2.erode(im, kernel) <span class="hljs-comment"># 腐蚀</span><br>im = cv2.dilate(im, kernel) <span class="hljs-comment"># 膨胀 </span><br></code></pre></td></tr></table></figure><p>一般情况，二值化先用<code>cv2.cvtColor(im, cv2.COLOR_BGR2GRAY)</code>将图片转为灰度图像，再用<code>cv2.threshold(im, threshould, 255, cv2.THRESH_BINARY)</code>就完成了二值化。</p><p>但是在本例中，将阈值设得比较低，数字以外得区域还会有白点；将阈值设得比较高，数字变得非常残缺。所以设置了一个居中的阈值，然后进行腐蚀后膨胀的操作，消除小的白点。</p><p>结果如下：</p><figure><imgsrc="https://zuoguan-piclib-1257172707.cos.ap-guangzhou.myqcloud.com/部落冲突辅助数字识别/二值化结果.png"alt="二值化结果" /><figcaption aria-hidden="true">二值化结果</figcaption></figure><h3 id="裁剪单个数字">裁剪单个数字</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python">gold_im = im[<span class="hljs-number">0</span>: im.shape[<span class="hljs-number">0</span>]//<span class="hljs-number">2</span>, <span class="hljs-number">0</span>: im.shape[<span class="hljs-number">1</span>]] <span class="hljs-comment"># 取第一行（金币）</span><br><br>contours, _ = cv2.findContours(im, cv2.RETR_EXTERNAL, cv2.CHAIN_APPROX_SIMPLE)<br>contours = <span class="hljs-built_in">sorted</span>(contours, key=<span class="hljs-keyword">lambda</span> item: cv2.boundingRect(item)[<span class="hljs-number">0</span>]) <span class="hljs-comment"># 按从左到右的顺序</span><br><br><span class="hljs-keyword">for</span> contour <span class="hljs-keyword">in</span> contours:<br>    x, y, w, h = cv2.boundingRect(contour)<br>    single_num = gold_im[y:y + h, x:x + w]<br>    single_num = cv2.resize(single_num, (<span class="hljs-number">16</span>, <span class="hljs-number">16</span>))<br></code></pre></td></tr></table></figure><p>高中时，是自己实现了这一算法的。现在，通过ChatGPT，了解到了cv2.findContours这一函数，是用于在图像中查找轮廓的函数。</p><p>然后就是不断搜鱼、截图，制作用于训练神经网络的数据集，每个数字收集20张左右已经足够了。</p><figure><imgsrc="https://zuoguan-piclib-1257172707.cos.ap-guangzhou.myqcloud.com/部落冲突辅助数字识别/数字.jpg"alt="数字" /><figcaption aria-hidden="true">数字</figcaption></figure><p>（因为resize操作，数字1变形比较严重，不过没关系）</p><h3 id="神经网络">神经网络</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> torch.nn <span class="hljs-keyword">as</span> nn<br><span class="hljs-keyword">import</span> torch<br><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Net</span>(nn.Module):<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-built_in">super</span>(Net, <span class="hljs-variable language_">self</span>).__init__()<br>        <span class="hljs-variable language_">self</span>.features = nn.Sequential(<br>            nn.Conv2d(<span class="hljs-number">3</span>, <span class="hljs-number">32</span>, kernel_size=<span class="hljs-number">3</span>, padding=<span class="hljs-number">1</span>),<br>            nn.ReLU(inplace=<span class="hljs-literal">True</span>),<br>            nn.Conv2d(<span class="hljs-number">32</span>, <span class="hljs-number">32</span>, kernel_size=<span class="hljs-number">3</span>, padding=<span class="hljs-number">1</span>),<br>            nn.ReLU(inplace=<span class="hljs-literal">True</span>),<br>            nn.MaxPool2d(kernel_size=<span class="hljs-number">2</span>, stride=<span class="hljs-number">2</span>),<br><br>            nn.Conv2d(<span class="hljs-number">32</span>, <span class="hljs-number">64</span>, kernel_size=<span class="hljs-number">3</span>, padding=<span class="hljs-number">1</span>),<br>            nn.ReLU(inplace=<span class="hljs-literal">True</span>),<br>            nn.Conv2d(<span class="hljs-number">64</span>, <span class="hljs-number">64</span>, kernel_size=<span class="hljs-number">3</span>, padding=<span class="hljs-number">1</span>),<br>            nn.ReLU(inplace=<span class="hljs-literal">True</span>),<br>            nn.MaxPool2d(kernel_size=<span class="hljs-number">2</span>, stride=<span class="hljs-number">2</span>),<br><br>            nn.Conv2d(<span class="hljs-number">64</span>, <span class="hljs-number">128</span>, kernel_size=<span class="hljs-number">3</span>, padding=<span class="hljs-number">1</span>),<br>            nn.ReLU(inplace=<span class="hljs-literal">True</span>),<br>            nn.Conv2d(<span class="hljs-number">128</span>, <span class="hljs-number">128</span>, kernel_size=<span class="hljs-number">3</span>, padding=<span class="hljs-number">1</span>),<br>            nn.ReLU(inplace=<span class="hljs-literal">True</span>),<br>            nn.MaxPool2d(kernel_size=<span class="hljs-number">2</span>, stride=<span class="hljs-number">2</span>),<br>        )<br><br>        <span class="hljs-variable language_">self</span>.classifier = nn.Sequential(<br>            nn.Linear(<span class="hljs-number">512</span>, <span class="hljs-number">128</span>),<br>            nn.ReLU(inplace=<span class="hljs-literal">True</span>),<br><br>            nn.Linear(<span class="hljs-number">128</span>, <span class="hljs-number">32</span>),<br>            nn.ReLU(inplace=<span class="hljs-literal">True</span>),<br><br>            nn.Linear(<span class="hljs-number">32</span>, <span class="hljs-number">10</span>),<br>        )<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">forward</span>(<span class="hljs-params">self, inputs</span>):<br>        outputs = <span class="hljs-variable language_">self</span>.features(inputs)<br>        outputs = torch.flatten(outputs, <span class="hljs-number">1</span>)<br>        outputs = <span class="hljs-variable language_">self</span>.classifier(outputs)<br><br>        <span class="hljs-keyword">return</span> outputs<br></code></pre></td></tr></table></figure><p>因为任务比较简单，这种级别的神经网络已经能完美地完成任务了。</p><h3 id="训练">训练</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> torchvision.datasets <span class="hljs-keyword">import</span> ImageFolder<br><span class="hljs-keyword">from</span> torchvision <span class="hljs-keyword">import</span> transforms<br><span class="hljs-keyword">from</span> torch.utils.data <span class="hljs-keyword">import</span> DataLoader<br><span class="hljs-keyword">import</span> torch<br><span class="hljs-keyword">import</span> torch.nn <span class="hljs-keyword">as</span> nn<br><span class="hljs-keyword">import</span> torch.optim <span class="hljs-keyword">as</span> optim<br><br><br>dataset = ImageFolder(<span class="hljs-string">&#x27;dataset&#x27;</span>, transforms.ToTensor())<br>data_loader = DataLoader(dataset=dataset, batch_size=<span class="hljs-number">16</span>, shuffle=<span class="hljs-literal">True</span>)<br><br>model = Net()<br>optimizer = optim.AdamW(model.parameters(), lr=<span class="hljs-number">0.001</span>)<br>criterion = nn.CrossEntropyLoss()<br><br>num_epochs = <span class="hljs-number">25</span><br><span class="hljs-keyword">for</span> epoch <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(num_epochs):<br>    model.train()<br>    total_loss = <span class="hljs-number">0</span><br>    <span class="hljs-keyword">for</span> inputs, labels <span class="hljs-keyword">in</span> data_loader:<br>        optimizer.zero_grad()<br><br>        outputs = model(inputs)<br>        loss = criterion(outputs, labels)<br>        total_loss += loss.item()<br>        loss.backward()<br>        optimizer.step()<br><br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;Epoch [<span class="hljs-subst">&#123;epoch+<span class="hljs-number">1</span>:02d&#125;</span>/<span class="hljs-subst">&#123;num_epochs&#125;</span>], Loss: <span class="hljs-subst">&#123;total_loss/<span class="hljs-built_in">len</span>(data_loader):<span class="hljs-number">.8</span>f&#125;</span>&#x27;</span>)<br><br>torch.save(model.state_dict(), <span class="hljs-string">&#x27;weight.pth&#x27;</span>)<br></code></pre></td></tr></table></figure><p>小神经网络+小数据集，在我的小破笔记本上1分钟不到就训练好了。</p><h3 id="推理">推理</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs python">model = Net()<br>model.load_state_dict(torch.load(<span class="hljs-string">&quot;weight.pth&quot;</span>))<br><br>contours, _ = cv2.findContours(gold_im, cv2.RETR_EXTERNAL, cv2.CHAIN_APPROX_SIMPLE)<br>contours = <span class="hljs-built_in">sorted</span>(contours, key=<span class="hljs-keyword">lambda</span> item: cv2.boundingRect(item)[<span class="hljs-number">0</span>])<br><br>transform = transforms.Compose([<br>    transforms.ToPILImage(),<br>    transforms.ToTensor()<br>])<br><br>nums = []<br><span class="hljs-keyword">for</span> contour <span class="hljs-keyword">in</span> contours:<br>    x, y, w, h = cv2.boundingRect(contour)<br>    num = gold_im[y:y + h, x:x + w]<br>    num = cv2.resize(num, (<span class="hljs-number">16</span>, <span class="hljs-number">16</span>))<br>    num = cv2.cvtColor(num, cv2.COLOR_GRAY2RGB)<br>    num = transform(num)<br>    texts.append(num)<br><br>nums = torch.stack(nums)<br>res = model(nums)<br>res = numpy.argmax(res.detach().numpy(), <span class="hljs-number">1</span>)<br>res = numpy.<span class="hljs-built_in">sum</span>(res*<span class="hljs-number">10</span>**numpy.arange(<span class="hljs-built_in">len</span>(res)-<span class="hljs-number">1</span>, -<span class="hljs-number">1</span>, -<span class="hljs-number">1</span>))<br></code></pre></td></tr></table></figure><p>搜了几条鱼试验了一下，目前准确率100%，从截完图到识别出结果，耗时在50ms以内，后期资源数上升，再加上黑油，应该也能在200ms内完成推理。</p><h2 id="活死鱼判断">活死鱼判断</h2><p>这个是一直困扰着我的难题。开始做这个项目，我就一直在想该怎样完成这一任务。</p><ul><li><p>CNN Is All You Need?</p><p>最初的想法是直接用卷积神经网络来完成，收集上千个样本，然后直接训练。但是仔细思考，人是怎么判断活死鱼的呢？我是通过墓碑数和采集器是否是满的来判断，CNN能捕捉到这些小细节吗？我对此抱有怀疑。</p><p>接着，我就想使用多个分类器，就是CNN提取完特征后，分类器1判断墓碑数是多是少，分类器2判断采集器是否是满的，分类器3才判断是死鱼还是活鱼，前两个分类器是帮助模型收敛和防止过拟合的。</p><p>但是考虑到要标注上千张图片，还是作罢了。</p></li><li><p>You Only Look Once</p><p>又想到了用目标检测算法，检测图片中的奖牌、墓碑、满的采集器。现在训练Yolov8近乎是傻瓜式的。以及之前训练过一个用于微信跳一跳的Yolov5模型，当时只用了60张图片就训练出了一个很不错的模型，而且有相当强的泛化能力。所以我对这一方案进行了尝试，且非常有信息。然而，标注了30张图像，训练的结果非常糟糕。</p></li><li><p>传统CV</p><p>无奈，只能使用传统的CV了。判断的规则是，如果是灰牌且有5个以上的墓碑则是死鱼，或者有10个以上的墓碑也是死鱼。</p></li></ul><p>关键的代码是 <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python">score = cv2.matchTemplate(origin, template, cv2.TM_CCOEFF_NORMED)<br>每个墓碑会有几个像素的差异，而墓碑又非常小，导致几个像素的差异影响非常大，所以是通过计数得分＞<span class="hljs-number">0.75</span>的个数，来近似墓碑的个数。<br></code></pre></td></tr></table></figure></p><h2 id="模拟下兵">模拟下兵</h2><p>入坑部落冲突的一个原因是，这个游戏居然可以滑动下兵！所以大家口中的“一字划”，我是真的“一字划”的。所以我希望能模拟出这种下兵方式。</p><p>仔细阅读<code>Airtest</code>的API文档和源码后，了解到了<code>airtest.core.android.touch_methods.base_touch</code>中有<code>DownEvent</code>、<code>UpEvent</code>、<code>MoveEvent</code>、<code>SleepEvent</code>这四个基本事件类，<code>contact</code>参数用来实现多触点，<code>contact=0</code>为触点1，<code>contact=1</code>为触点2，以此类推。这一<code>module</code>中，还有<code>BaseTouch</code>这一基类，定义了<code>swipe</code>、<code>pinch</code>、<code>touch</code>等手势，这些手势是由<code>DownEvent</code>、<code>UpEvent</code>、<code>MoveEvent</code>、<code>SleepEvent</code>组合成的。</p><p>在<code>airtest.core.android.touch_methods.minitouch</code>和<code>airtest.core.android.touch_methods.maxtouch</code>这两个<code>module</code>中，都基于<code>BaseTouch</code>实现了<code>MaxTouch</code>和<code>MiniTouch</code>。我个人的理解是，它们使用不同的方法去执行<code>DownEvent</code>、<code>UpEvent</code>、<code>MoveEvent</code>、<code>SleepEvent</code>，而<code>BaseTouch</code>是没有实现执行的方法的。</p><p>于是我继承了<code>MaxTouch</code>，去实现我的滑动下兵，简单来说就是一个<code>DownEvent</code>，加上数个<code>SleepEvent</code>、<code>MoveEvent</code>，最后来一个<code>UpEvent</code>。虽然尽力地去模仿人类真实下兵的样子了，但依旧有很大差别。</p><p>此外，我还重写了<code>swipe</code>、<code>pinch</code>、<code>touch</code>这些手势，加上了一些随机的偏移。（主要是害怕被封号，不过也不知道这样有没有用）</p>]]></content>
    
    
    <categories>
      
      <category>编程</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Python</tag>
      
      <tag>脚本</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>为博客添加一只可爱的猫猫</title>
    <link href="/2024/11/20/%E4%B8%BA%E5%8D%9A%E5%AE%A2%E6%B7%BB%E5%8A%A0%E4%B8%80%E5%8F%AA%E5%8F%AF%E7%88%B1%E7%9A%84%E7%8C%AB%E7%8C%AB/"/>
    <url>/2024/11/20/%E4%B8%BA%E5%8D%9A%E5%AE%A2%E6%B7%BB%E5%8A%A0%E4%B8%80%E5%8F%AA%E5%8F%AF%E7%88%B1%E7%9A%84%E7%8C%AB%E7%8C%AB/</url>
    
    <content type="html"><![CDATA[<ol type="1"><li>安装live2d插件 <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">npm install --save hexo-helper-live2d<br></code></pre></td></tr></table></figure></li><li>安装模型 <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">npm install live2d-widget-model-hijiki<br></code></pre></td></tr></table></figure> 其他模型： <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs bash">live2d-widget-model-hijiki<br>live2d-widget-model-tororo<br>live2d-widget-model-chitose<br>live2d-widget-model-epsilon2_1<br>live2d-widget-model-gf<br>live2d-widget-model-haruto<br>live2d-widget-model-hibiki<br>live2d-widget-model-izumi<br>live2d-widget-model-koharu<br>live2d-widget-model-miku<br>live2d-widget-model-ni-j<br>live2d-widget-model-nico<br>live2d-widget-model-nietzsche<br>live2d-widget-model-nipsilon<br>live2d-widget-model-nito<br>live2d-widget-model-shizuku<br>live2d-widget-model-tsumiki<br>live2d-widget-model-unitychan<br>live2d-widget-model-wanko<br>live2d-widget-model-z16<br></code></pre></td></tr></table></figure>其中<code>live2d-widget-model-hijiki</code>是一只黑色的猫猫，<code>live2d-widget-model-tororo</code>是一只白色的猫猫，其他的就自己尝试吧。</li><li>在hexo的配置文件（即<code>_config.yml</code>）中添加以下内容<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs python">live2d:<br>enable: true<br>scriptFrom: local<br>pluginRootPath: live2dw/<br>pluginJsPath: lib/<br>pluginModelPath: assets/<br>tagMode: false<br>debug: false<br>model:<br>    use: live2d-widget-model-hijiki <span class="hljs-comment">#这里改为你模型的名字</span><br>display:<br>    position: right<br>    width: <span class="hljs-number">180</span><br>    height: <span class="hljs-number">300</span><br>mobile:<br>    show: true<br>react:<br>    opacity: <span class="hljs-number">0.7</span><br></code></pre></td></tr></table></figure></li></ol>]]></content>
    
    
    <categories>
      
      <category>其他</category>
      
    </categories>
    
    
    <tags>
      
      <tag>博客</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>使用SciPy进行统计分析</title>
    <link href="/2024/11/20/%E4%BD%BF%E7%94%A8SciPy%E8%BF%9B%E8%A1%8C%E7%BB%9F%E8%AE%A1%E5%88%86%E6%9E%90/"/>
    <url>/2024/11/20/%E4%BD%BF%E7%94%A8SciPy%E8%BF%9B%E8%A1%8C%E7%BB%9F%E8%AE%A1%E5%88%86%E6%9E%90/</url>
    
    <content type="html"><![CDATA[<p><code>scipy.stats</code>提供了许多统计检验方法 * 单样本t检验<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">scipy.stats.ttest_1samp(a, popmean, axis=<span class="hljs-number">0</span>, nan_policy=<span class="hljs-string">&#x27;propagate&#x27;</span>, alternative=<span class="hljs-string">&quot;two-sided&quot;</span>)<br></code></pre></td></tr></table></figure></p><ul><li><p>配对样本t检验 <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">scipy.stats.ttest_rel(a, b, axis=<span class="hljs-number">0</span>, nan_policy=<span class="hljs-string">&#x27;propagate&#x27;</span>, alternative=<span class="hljs-string">&quot;two-sided&quot;</span>)<br></code></pre></td></tr></table></figure></p></li><li><p>两独立样本t检验 <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python">scipy.stats.ttest_ind(<br>    a, b, axis=<span class="hljs-number">0</span>, equal_var=<span class="hljs-literal">True</span>, nan_policy=<span class="hljs-string">&#x27;propagate&#x27;</span>,permutations=<span class="hljs-literal">None</span>,<br>    random_state=<span class="hljs-literal">None</span>, alternative=<span class="hljs-string">&quot;two-sided&quot;</span>, trim=<span class="hljs-number">0</span><br>)<br></code></pre></td></tr></table></figure></p></li><li><p>完全随机设计的方差分析 <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">scipy.stats.f_oneway(*samples, axis=<span class="hljs-number">0</span>)<br></code></pre></td></tr></table></figure></p></li><li><p>随机区组设计的方差分析在<code>scipy.stats</code>中似乎未提供可使用的函数，我尝试实现了一下，水平有限且一般使用用不到高维度的数据，所以仅支持1维的数据。<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> numpy<br><span class="hljs-keyword">from</span> scipy <span class="hljs-keyword">import</span> special<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">f_twoway</span>(<span class="hljs-params">*samples</span>):<br>    all_data = numpy.asarray(samples)<br>    k, m = all_data.shape<br>    <br>    <span class="hljs-comment"># 计算均值，exp：各处理组，block：各处理组</span><br>    total_avg = all_data.mean()<br>    exp_avgs = all_data.mean(<span class="hljs-number">1</span>)<br>    block_avgs = all_data.mean(<span class="hljs-number">0</span>)<br>    <br>    <span class="hljs-comment"># 计算平方和，err：误差</span><br>    total_ss = numpy.power(all_data - total_avg, <span class="hljs-number">2</span>).<span class="hljs-built_in">sum</span>()<br>    exp_ss = (numpy.power(exp_avgs - total_avg, <span class="hljs-number">2</span>)*m).<span class="hljs-built_in">sum</span>()<br>    block_ss = (numpy.power(block_avgs - total_avg, <span class="hljs-number">2</span>)*k).<span class="hljs-built_in">sum</span>()<br>    err_ss = total_ss - exp_ss - block_ss<br>    <br>    <span class="hljs-comment"># 计算均方</span><br>    exp_ms = exp_ss/(k-<span class="hljs-number">1</span>)<br>    err_ms = err_ss/((k-<span class="hljs-number">1</span>)*(m-<span class="hljs-number">1</span>))<br>    <br>    <span class="hljs-comment"># 计算F值与P值</span><br>    statistic = exp_ms/err_ms<br>    p_value = special.fdtrc(k-<span class="hljs-number">1</span>, (k-<span class="hljs-number">1</span>)*(m-<span class="hljs-number">1</span>), statistic)<br><br>    <span class="hljs-keyword">return</span> statistic, p_value<br></code></pre></td></tr></table></figure></p></li><li><p>卡方检验 <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">scipy.stats.chi2_contingency(observed, correction=<span class="hljs-literal">True</span>, lambda_=<span class="hljs-literal">None</span>)<br></code></pre></td></tr></table></figure> <code>observed</code>: 表格</p><table><thead><tr><th style="text-align: center;"></th><th style="text-align: center;">state1</th><th style="text-align: center;">state2</th></tr></thead><tbody><tr><td style="text-align: center;">group1</td><td style="text-align: center;">a</td><td style="text-align: center;">b</td></tr><tr><td style="text-align: center;">group2</td><td style="text-align: center;">c</td><td style="text-align: center;">d</td></tr></tbody></table><p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python">observed = [<br>    [a, b],<br>    [c, d],<br>]<br></code></pre></td></tr></table></figure></p></li><li><p>Fisher确切概率法 <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">scipy.stats.fisher_exact(table, alternative=<span class="hljs-string">&#x27;two-sided&#x27;</span>)<br></code></pre></td></tr></table></figure></p></li><li><p>配对设计资料的符号秩和检验 <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python">scipy.stats.wilcoxon(<br>    x, y=<span class="hljs-literal">None</span>, zero_method=<span class="hljs-string">&quot;wilcox&quot;</span>, correction=<span class="hljs-literal">False</span>,<br>    alternative=<span class="hljs-string">&quot;two-sided&quot;</span>, method=<span class="hljs-string">&#x27;auto&#x27;</span><br>)<br></code></pre></td></tr></table></figure></p></li><li><p>两独立样本的符号秩和检验 <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python">scipy.stats.mannwhitneyu(<br>    x, y, use_continuity=<span class="hljs-literal">True</span>, alternative=<span class="hljs-string">&quot;two-sided&quot;</span>,<br>    axis=<span class="hljs-number">0</span>, method=<span class="hljs-string">&quot;auto&quot;</span><br>)<br></code></pre></td></tr></table></figure>该函数返回的是检验统计量<spanclass="math inline">\(U\)</span>，然而，我们一般更倾向使用统计量<spanclass="math inline">\(Z\)</span>，其计算公式如下</p><p><span class="math display">\[z =\frac{U-m_{U}}{\sigma_{U}}\]</span></p><p>其中，<span class="math inline">\(m_{U} = \frac{n_{1}n_{2}}{2},\sigma_{U}=\sqrt{\frac{n_{1}n_{2}\left(n_{1}+n_{2}+1\right)}{12}-\frac{n_{1} n_{2}\sum_{k=1}^{K}\left(t_{k}^{3}-t_{k}\right)}{12 n(n-1)}}\)</span></p><p>其中，<span class="math inline">\(n_{1},n_{2}\)</span>分别为两组样本的样本数，<span class="math inline">\(n =n_{1} + n_{2}\)</span>。<spanclass="math inline">\(t_{k}\)</span>指并列第<spanclass="math inline">\(k\)</span>的个数。 当不存在并列的情况时，<spanclass="math inline">\(\sigma_{U}\)</span>可以简化为<spanclass="math inline">\(\sigma_{U} = \sqrt{\frac{n_{1}n_{2}\left(n_{1}+n_{2}+1\right)}{12}}\)</span></p><p>通过如下代码，即可算出统计量<span class="math inline">\(Z\)</span>：<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> collections <span class="hljs-keyword">import</span> Counter<br><br>n1 = <span class="hljs-built_in">len</span>(samples1)<br>n2 = <span class="hljs-built_in">len</span>(samples2)<br><br><span class="hljs-comment"># 将两组样本合并，用Counter计算每一个值的个数</span><br>counter = Counter(samples1 + samples2)<br><br><span class="hljs-comment"># 计算与并列相关的那一项</span><br>sigma_ties = <span class="hljs-built_in">sum</span>(<span class="hljs-built_in">map</span>(<span class="hljs-keyword">lambda</span> item: item**<span class="hljs-number">3</span>-item, counter.values()))<br>sigma_ties = (sigma_ties*n1*n2) / (<span class="hljs-number">12</span>*(n1+n2)*(n1+n2-<span class="hljs-number">1</span>))<br>sigma_ties = (n1*n2*(n1+n2+<span class="hljs-number">1</span>)/<span class="hljs-number">12</span> - sigma_ties)**<span class="hljs-number">0.5</span><br><br><span class="hljs-comment"># 计算统计量Z</span><br>z = (statistic - n1*n2*<span class="hljs-number">0.5</span>) / sigma_ties<br></code></pre></td></tr></table></figure></p></li><li><p>多个独立样本的符合秩和检验 <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">scipy.stats.kruskal(*samples, nan_policy=<span class="hljs-string">&#x27;propagate&#x27;</span>):<br></code></pre></td></tr></table></figure></p></li></ul>]]></content>
    
    
    <categories>
      
      <category>编程</category>
      
    </categories>
    
    
    <tags>
      
      <tag>统计</tag>
      
      <tag>Python</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>机器学习中数据的简单处理</title>
    <link href="/2024/11/20/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E4%B8%AD%E6%95%B0%E6%8D%AE%E7%9A%84%E7%AE%80%E5%8D%95%E5%A4%84%E7%90%86/"/>
    <url>/2024/11/20/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E4%B8%AD%E6%95%B0%E6%8D%AE%E7%9A%84%E7%AE%80%E5%8D%95%E5%A4%84%E7%90%86/</url>
    
    <content type="html"><![CDATA[<p><code>Kaggle</code>机器学习比赛的数据集中会有一些缺失值和一些离散值，分享一下使用pandas快速处理的方法。</p><p>首先将训练集和测试集合并（在后续步骤中训练集与测试集一起算均值、方差，属于比赛中的小技巧）<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python">train = pandas.read_csv(<span class="hljs-string">&quot;train.csv&quot;</span>)<br>test = pandas.read_csv(<span class="hljs-string">&quot;test.csv&quot;</span>)<br>all_features = pandas.concat((train.iloc[:, <span class="hljs-number">1</span>:-<span class="hljs-number">1</span>], test.iloc[:, <span class="hljs-number">1</span>:]))<br></code></pre></td></tr></table></figure>将数值型特征重新缩放到零均值和单位方差来标准化数据，缺失值替换为0，即均值<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python">numeric_features = all_features.dtypes[all_features.dtypes != <span class="hljs-string">&quot;object&quot;</span>].index<br>all_features[numeric_features] = all_features[numeric_features].apply(<br>    <span class="hljs-keyword">lambda</span> x: (x - x.mean()) / x.std()<br>)<br>all_features[numeric_features] = all_features[numeric_features].fillna(<span class="hljs-number">0</span>)<br></code></pre></td></tr></table></figure> 对离散数值采用one-hot编码处理 <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">all_features = pandas.get_dummies(all_features, dummy_na=<span class="hljs-literal">True</span>)<br></code></pre></td></tr></table></figure>处理完后，再重新分为训练集和测试集 <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python">n_train = train.shape[<span class="hljs-number">0</span>]<br>train_features = torch.tensor(all_features[:n_train].values.astype(numpy.float32), dtype=torch.float32)<br>test_features = torch.tensor(all_features[n_train:].values.astype(numpy.float32), dtype=torch.float32)<br></code></pre></td></tr></table></figure></p>]]></content>
    
    
    <categories>
      
      <category>编程</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Python</tag>
      
      <tag>数据处理</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>使用 Python + Clash，爬取外网数据</title>
    <link href="/2024/11/20/%E4%BD%BF%E7%94%A8-Python-Clash%EF%BC%8C%E7%88%AC%E5%8F%96%E5%A4%96%E7%BD%91%E6%95%B0%E6%8D%AE/"/>
    <url>/2024/11/20/%E4%BD%BF%E7%94%A8-Python-Clash%EF%BC%8C%E7%88%AC%E5%8F%96%E5%A4%96%E7%BD%91%E6%95%B0%E6%8D%AE/</url>
    
    <content type="html"><![CDATA[<p>有的时候，希望能够爬取一些外网的数据，但是开启<code>Clash</code>之类的软件后，发现会直接报<code>requests.exceptions.ProxyError</code>的错误。解决方法的代码如下：<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> requests<br><span class="hljs-keyword">import</span> urllib3<br><br><br><span class="hljs-comment"># 设置了verify=False后(在后面)会有警告，关闭警告</span><br>urllib3.disable_warnings()<br><br>url = <span class="hljs-string">&quot;https://www.google.com&quot;</span><br><br><span class="hljs-comment"># Clash默认的代理端口为7890</span><br>proxies = &#123;<br>    <span class="hljs-string">&#x27;http&#x27;</span>: <span class="hljs-string">&#x27;http://127.0.0.1:7890/&#x27;</span>,<br>    <span class="hljs-string">&#x27;https&#x27;</span>: <span class="hljs-string">&#x27;http://127.0.0.1:7890/&#x27;</span><br>&#125;<br><br>response = requests.get(url=url, verify=<span class="hljs-literal">False</span>, proxies=proxies)<br></code></pre></td></tr></table></figure>将代理的IP地址以及端口号写死的做法并不优雅，可以使用<code>urllib.request</code>中的<code>getproxies</code>获取系统Web代理信息。当未开启代理时，返回空字典，开启代理时，返回如下的字典：<figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br>    &#x27;http&#x27;<span class="hljs-punctuation">:</span> &#x27;http<span class="hljs-punctuation">:</span><span class="hljs-comment">//127.0.0.1:7890&#x27;,</span><br> &#x27;https&#x27;<span class="hljs-punctuation">:</span> &#x27;https<span class="hljs-punctuation">:</span><span class="hljs-comment">//127.0.0.1:7890&#x27;,</span><br> &#x27;ftp&#x27;<span class="hljs-punctuation">:</span> &#x27;ftp<span class="hljs-punctuation">:</span><span class="hljs-comment">//127.0.0.1:7890&#x27;</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><code>urllib3.disable_warnings()</code>这样的代码也不够优雅。使用<code>httpx</code>则不用设置<code>urllib3.disable_warnings()</code>、<code>verify=False</code>。<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> urllib.request <span class="hljs-keyword">import</span> getproxies<br><span class="hljs-keyword">import</span> httpx<br><br><br>response = httpx.get(<br><span class="hljs-string">&quot;https://www.google.com/&quot;</span>,<br>    proxy=getproxies().get(<span class="hljs-string">&quot;http&quot;</span>)<br>)<br></code></pre></td></tr></table></figure>也可以使用<code>Client</code>，和<code>requests</code>的<code>session</code>基本一致<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> urllib.request <span class="hljs-keyword">import</span> getproxies<br><span class="hljs-keyword">import</span> httpx<br><br><br>client = httpx.Client(<br>    proxy=getproxies().get(<span class="hljs-string">&quot;http&quot;</span>)<br>)<br><br>response = client.get(<span class="hljs-string">&quot;https://www.google.com/&quot;</span>)<br></code></pre></td></tr></table></figure></p>]]></content>
    
    
    <categories>
      
      <category>编程</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Python</tag>
      
      <tag>爬虫</tag>
      
      <tag>代理</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>抗体化学结构的发现</title>
    <link href="/2024/11/20/%E6%8A%97%E4%BD%93%E5%8C%96%E5%AD%A6%E7%BB%93%E6%9E%84%E7%9A%84%E5%8F%91%E7%8E%B0/"/>
    <url>/2024/11/20/%E6%8A%97%E4%BD%93%E5%8C%96%E5%AD%A6%E7%BB%93%E6%9E%84%E7%9A%84%E5%8F%91%E7%8E%B0/</url>
    
    <content type="html"><![CDATA[<p>抗体又名免疫球蛋白，是一类由B淋巴细胞分泌且在机体免疫系统中发挥关键作用的蛋白质。早在1890年，科学家就首次在血清中发现抗体并证实其与多种疾病的发生相关，从而使抗体研究成为免疫学的一个重要分支。随后的研究表明，血液中存在上万种不同抗体，它们通过与抗原的特异性识别和结合而发挥生物学作用。但是直到20世纪50年代，人们对抗体化学结构和抗原识别机制的理解还非常有限。1959年，两位年轻科学家率先揭开抗体结构的神秘面纱，从而推动了相关学科的迅猛发展。<ahref="https://doi.org/10.3969/j.issn.0368-6396.2014.06.012">[1]</a></p><p>Rodney RobertPorter借鉴胰岛素结构测定的策略，即把蛋白质首先分解为小片段。他决定利用蛋白酶对抗体进行分解。然而他发现，过去的实验使用了的是粗木瓜蛋白酶，因大量非γ-球蛋白的存在，对分解产物的研究产生了较大的误差。1958年，Porter使用结晶状木瓜蛋白酶进行实验，酶与底物的比例要低得多，减少了实验误差。实验得到了3个片段，一个片段在所有γ-球蛋白分子中都是相同的，并且负责γ-球蛋白的共同抗原特异性，其他两个片段不同的γ-球蛋白间不相同，可能包含抗体结合中心，即Fc与Fab。<ahref="https://doi.org/10.1038/182670a0">[2]</a></p><p>Gerald MauriceEdelman对于抗体的研究也受胰岛素结构解析的影响，他注意到即使由51个氨基酸组成的胰岛素，也包含两条链——21个氨基酸的A链和30个氨基酸的B链，两者通过二硫键相连，因此推测分子量更大的抗体应该也是由多条链构成。<ahref="https://doi.org/10.3969/j.issn.0368-6396.2014.06.012">[1]</a>为证实自己推测的正确性，Edelman决定用实验加以证实。Edelman最初也采用酶解法，然而酶水解肽链具有选择性。1959年，Edelman用浓尿酸还原法，确定了抗体存在分子间二硫键（不排除涉及二硫键以外的键的可能性），表明抗体可能由多条链构成。<ahref="https://doi.org/10.1021/ja01521a071">[3]</a></p><p>1961年，Edelman和同事用β-巯基乙醇将IgG分开成两部分，一个分子量较大称为重链，另一个分子量较小称为轻链，并证明是一种对称结构。Edelman在结合自己实验和相关研究数据的基础上提出了自己的抗体化学结构，两条链折叠形成一个独特的袋状结构而实现抗原俘获。Porter获知Edelman的结果后，起初保持怀疑态度，但是他在不同条件下重复了Edelman的实验，并最终于1963年结合两人的实验结果提出了第一个令人满意的IgG分子结构模型。在该模型中，抗体是由两条轻链和两条重链组成的对称结构，形似字母“Y”，具有一个主干和两个弯曲的分支，每个分支有一条轻链和一条重链的1/2并排组成，而主干则由两条重链的其余1/2构成。特异性结合位点位于Y两个分支的顶端，被轻链和重链所共同决定，它们的分离将导致失活。随后，大量的事实证明了这个模型的正确性。<ahref="https://doi.org/10.3969/j.issn.0368-6396.2014.06.012">[1]</a></p><p>1972年，Porter和Edelman由于“抗体化学结构的发现”而共获诺贝尔生理学或医学奖，Porter的贡献在于发现抗体中的抗原识别区，而Edelman的贡献在于鉴定出抗体由轻链和重链构成，两人共同阐明了抗体的化学结构。抗体化学结构的发现，阐明了抗体识别抗原的结构基础。</p><p><a href="https://doi.org/10.3969/j.issn.0368-6396.2014.06.012">[1]郭晓强.埃德尔曼:发现抗体结构的科学家.科学,2014,66(06):49-52.</a></p><p><a href="https://doi.org/10.1038/182670a0">[2] PORTER, R R.“Separation and isolation of fractions of rabbit gamma-globulincontaining the antibody and antigenic combining sites.” Nature vol.182,4636 (1958): 670-1. doi:10.1038/182670a0</a></p><p><a href="https://doi.org/10.1021/ja01521a071">[3] Edelman, and M.Gerald . "DISSOCIATION OF γ-GLOBULIN." Journal of the American ChemicalSociety 81.12(2002):3155-3156.</a></p>]]></content>
    
    
    <categories>
      
      <category>医学</category>
      
    </categories>
    
    
    <tags>
      
      <tag>免疫</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2024/11/20/Hello-World/"/>
    <url>/2024/11/20/Hello-World/</url>
    
    <content type="html"><![CDATA[<p>兜兜转转，又回到了这？</p><p>在许久以前，我就想搭建一个自己的网站，当时觉得这很酷。可惜的是，当时的我只是个编程菜菜菜菜鸟，甚至连服务器是什么都不知道。</p><p>在后来的编程学习中，我了解到可以通过github部署静态网页，还了解到hexo、hugo等博客框架。让我萌生要去搭建自己的博客的想法，是因为在编程学习过程中，发现那些个人博客的文章时常能帮我解决一些冷门的问题，我也希望能够通过自己的踩坑经历，帮助到一些人。</p><p>当时我确实成功部署了我的博客。但因为当时还是一个高三学生，基本没有时间管理博客，而且githubpages的访问速度感人，遂放弃了。</p><p>高考结束后，了解到了vercel，这可以解决访问速度慢的问题。于是，我用python编写了一个简陋的博客框架，再一次部署了我的博客。</p><p>但是因为高考失利，并没有选择计算机相关的专业，而是选择了医学检验技术，学业比较繁忙，没有时间去写博客，也没有时间优化我的博客框架，又一次放弃了。</p><p>后来学会了租VPS、购买域名、反向代理等，还了解到了typecho这一动态博客框架，再一次搭建了博客。</p><p>运营了半年左右，突然不想继续租VPS了，但是又想保留着我的博客。思考了很多方法，也有去寻找方法，最后是用github+ vercel +hexo，迁移了我的博客。不过很快发现vercel被墙了，又多加了一个netlify。所以兜兜转转，又回到了hexo与vercel？</p>]]></content>
    
    
    <categories>
      
      <category>其他</category>
      
    </categories>
    
    
    <tags>
      
      <tag>博客</tag>
      
      <tag>杂谈</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
